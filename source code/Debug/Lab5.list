
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b64  08003b64  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003b64  08003b64  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b64  08003b64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000074  08003be0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003be0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea21  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231c  00000000  00000000  0002eabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00030de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185d9  00000000  00000000  00032828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e858  00000000  00000000  0004ae01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7c6  00000000  00000000  00059659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6e1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  000e6e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aa8 	.word	0x08003aa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003aa8 	.word	0x08003aa8

0800014c <str_cpy>:
uint8_t command_data[30];

int status=GET_START;
int communication_status=RECIVE_COMMAND;

void str_cpy(uint8_t* str1, uint8_t* str2) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	for (int i=0;i<MAX_BUFFER_SIZE;i++) {
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
 800015a:	e00a      	b.n	8000172 <str_cpy+0x26>
		str1[i]=str2[i];
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	683a      	ldr	r2, [r7, #0]
 8000160:	441a      	add	r2, r3
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	6879      	ldr	r1, [r7, #4]
 8000166:	440b      	add	r3, r1
 8000168:	7812      	ldrb	r2, [r2, #0]
 800016a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<MAX_BUFFER_SIZE;i++) {
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	3301      	adds	r3, #1
 8000170:	60fb      	str	r3, [r7, #12]
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	2b1d      	cmp	r3, #29
 8000176:	ddf1      	ble.n	800015c <str_cpy+0x10>
	}
}
 8000178:	bf00      	nop
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <command_parser_fsm>:

void command_parser_fsm(){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	switch (status) {
 8000188:	4b1c      	ldr	r3, [pc, #112]	; (80001fc <command_parser_fsm+0x78>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d002      	beq.n	8000196 <command_parser_fsm+0x12>
 8000190:	2b01      	cmp	r3, #1
 8000192:	d012      	beq.n	80001ba <command_parser_fsm+0x36>
				status=GET_START;
				index_buffer=0;
			}
			break;
		default:
			break;
 8000194:	e030      	b.n	80001f8 <command_parser_fsm+0x74>
			if (buffer[index_buffer-1]=='!') {
 8000196:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <command_parser_fsm+0x7c>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	3b01      	subs	r3, #1
 800019c:	4a19      	ldr	r2, [pc, #100]	; (8000204 <command_parser_fsm+0x80>)
 800019e:	5cd3      	ldrb	r3, [r2, r3]
 80001a0:	2b21      	cmp	r3, #33	; 0x21
 80001a2:	d103      	bne.n	80001ac <command_parser_fsm+0x28>
				status=GET_COMMAND;
 80001a4:	4b15      	ldr	r3, [pc, #84]	; (80001fc <command_parser_fsm+0x78>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	601a      	str	r2, [r3, #0]
			break;
 80001aa:	e025      	b.n	80001f8 <command_parser_fsm+0x74>
				status=GET_START;
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <command_parser_fsm+0x78>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
				index_buffer=0;
 80001b2:	4b13      	ldr	r3, [pc, #76]	; (8000200 <command_parser_fsm+0x7c>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	701a      	strb	r2, [r3, #0]
			break;
 80001b8:	e01e      	b.n	80001f8 <command_parser_fsm+0x74>
			if (index_buffer>29) {
 80001ba:	4b11      	ldr	r3, [pc, #68]	; (8000200 <command_parser_fsm+0x7c>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b1d      	cmp	r3, #29
 80001c0:	d905      	bls.n	80001ce <command_parser_fsm+0x4a>
				status=GET_START;
 80001c2:	4b0e      	ldr	r3, [pc, #56]	; (80001fc <command_parser_fsm+0x78>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
				index_buffer=0;
 80001c8:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <command_parser_fsm+0x7c>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]
			if (buffer[index_buffer-1]=='#') {
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <command_parser_fsm+0x7c>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	3b01      	subs	r3, #1
 80001d4:	4a0b      	ldr	r2, [pc, #44]	; (8000204 <command_parser_fsm+0x80>)
 80001d6:	5cd3      	ldrb	r3, [r2, r3]
 80001d8:	2b23      	cmp	r3, #35	; 0x23
 80001da:	d10c      	bne.n	80001f6 <command_parser_fsm+0x72>
				str_cpy(command_data, buffer);
 80001dc:	4909      	ldr	r1, [pc, #36]	; (8000204 <command_parser_fsm+0x80>)
 80001de:	480a      	ldr	r0, [pc, #40]	; (8000208 <command_parser_fsm+0x84>)
 80001e0:	f7ff ffb4 	bl	800014c <str_cpy>
				command_flag=1;
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <command_parser_fsm+0x88>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	701a      	strb	r2, [r3, #0]
				status=GET_START;
 80001ea:	4b04      	ldr	r3, [pc, #16]	; (80001fc <command_parser_fsm+0x78>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
				index_buffer=0;
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <command_parser_fsm+0x7c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
			break;
 80001f6:	bf00      	nop
	}
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000090 	.word	0x20000090
 8000200:	20000095 	.word	0x20000095
 8000204:	2000014c 	.word	0x2000014c
 8000208:	200000b8 	.word	0x200000b8
 800020c:	200000d6 	.word	0x200000d6

08000210 <compare>:

uint8_t compare(uint8_t* str1, uint8_t* str2) {
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
	for (int i=0;i<MAX_BUFFER_SIZE;i++) {
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	e016      	b.n	800024e <compare+0x3e>
		if (str1[i]!=str2[i]) return 0;
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	687a      	ldr	r2, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	781a      	ldrb	r2, [r3, #0]
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	6839      	ldr	r1, [r7, #0]
 800022c:	440b      	add	r3, r1
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	429a      	cmp	r2, r3
 8000232:	d001      	beq.n	8000238 <compare+0x28>
 8000234:	2300      	movs	r3, #0
 8000236:	e00e      	b.n	8000256 <compare+0x46>
		if (str1[i]=='#') return 1;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b23      	cmp	r3, #35	; 0x23
 8000242:	d101      	bne.n	8000248 <compare+0x38>
 8000244:	2301      	movs	r3, #1
 8000246:	e006      	b.n	8000256 <compare+0x46>
	for (int i=0;i<MAX_BUFFER_SIZE;i++) {
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	3301      	adds	r3, #1
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	2b1d      	cmp	r3, #29
 8000252:	dde5      	ble.n	8000220 <compare+0x10>
	}
	return 1;
 8000254:	2301      	movs	r3, #1
}
 8000256:	4618      	mov	r0, r3
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <uart_communication_fsm>:

void uart_communication_fsm(){
 8000260:	b580      	push	{r7, lr}
 8000262:	b09e      	sub	sp, #120	; 0x78
 8000264:	af00      	add	r7, sp, #0
	char str[50];
	switch (communication_status) {
 8000266:	4b3e      	ldr	r3, [pc, #248]	; (8000360 <uart_communication_fsm+0x100>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b0a      	cmp	r3, #10
 800026c:	d002      	beq.n	8000274 <uart_communication_fsm+0x14>
 800026e:	2b0b      	cmp	r3, #11
 8000270:	d02f      	beq.n	80002d2 <uart_communication_fsm+0x72>
				setTimer1(300);
			}

			break;
		default:
			break;
 8000272:	e071      	b.n	8000358 <uart_communication_fsm+0xf8>
			ADC_Value=HAL_ADC_GetValue(&hadc1);
 8000274:	483b      	ldr	r0, [pc, #236]	; (8000364 <uart_communication_fsm+0x104>)
 8000276:	f000 fd29 	bl	8000ccc <HAL_ADC_GetValue>
 800027a:	4603      	mov	r3, r0
 800027c:	461a      	mov	r2, r3
 800027e:	4b3a      	ldr	r3, [pc, #232]	; (8000368 <uart_communication_fsm+0x108>)
 8000280:	601a      	str	r2, [r3, #0]
			if (command_flag==1) {
 8000282:	4b3a      	ldr	r3, [pc, #232]	; (800036c <uart_communication_fsm+0x10c>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b01      	cmp	r3, #1
 8000288:	d163      	bne.n	8000352 <uart_communication_fsm+0xf2>
				uint8_t temp[MAX_BUFFER_SIZE]="!RST#";
 800028a:	4a39      	ldr	r2, [pc, #228]	; (8000370 <uart_communication_fsm+0x110>)
 800028c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000294:	6018      	str	r0, [r3, #0]
 8000296:	3304      	adds	r3, #4
 8000298:	8019      	strh	r1, [r3, #0]
 800029a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]
				if (compare(command_data, temp)==1) {
 80002ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002b0:	4619      	mov	r1, r3
 80002b2:	4830      	ldr	r0, [pc, #192]	; (8000374 <uart_communication_fsm+0x114>)
 80002b4:	f7ff ffac 	bl	8000210 <compare>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d105      	bne.n	80002ca <uart_communication_fsm+0x6a>
					communication_status=SEND_ADC;
 80002be:	4b28      	ldr	r3, [pc, #160]	; (8000360 <uart_communication_fsm+0x100>)
 80002c0:	220b      	movs	r2, #11
 80002c2:	601a      	str	r2, [r3, #0]
					setTimer1(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 fa03 	bl	80006d0 <setTimer1>
				command_flag=0;
 80002ca:	4b28      	ldr	r3, [pc, #160]	; (800036c <uart_communication_fsm+0x10c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
			break;
 80002d0:	e03f      	b.n	8000352 <uart_communication_fsm+0xf2>
			if (command_flag==1) {
 80002d2:	4b26      	ldr	r3, [pc, #152]	; (800036c <uart_communication_fsm+0x10c>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d121      	bne.n	800031e <uart_communication_fsm+0xbe>
				uint8_t temp[MAX_BUFFER_SIZE]="!OK#";
 80002da:	4a27      	ldr	r2, [pc, #156]	; (8000378 <uart_communication_fsm+0x118>)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e2:	6018      	str	r0, [r3, #0]
 80002e4:	3304      	adds	r3, #4
 80002e6:	7019      	strb	r1, [r3, #0]
 80002e8:	f107 0309 	add.w	r3, r7, #9
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]
 80002fa:	761a      	strb	r2, [r3, #24]
				if (compare(command_data, temp)==1) {
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	481c      	ldr	r0, [pc, #112]	; (8000374 <uart_communication_fsm+0x114>)
 8000302:	f7ff ff85 	bl	8000210 <compare>
 8000306:	4603      	mov	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d105      	bne.n	8000318 <uart_communication_fsm+0xb8>
					setTimer1(0);
 800030c:	2000      	movs	r0, #0
 800030e:	f000 f9df 	bl	80006d0 <setTimer1>
					communication_status=RECIVE_COMMAND;
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <uart_communication_fsm+0x100>)
 8000314:	220a      	movs	r2, #10
 8000316:	601a      	str	r2, [r3, #0]
				command_flag=0;
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <uart_communication_fsm+0x10c>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
			if (timer1_flag==1) {
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <uart_communication_fsm+0x11c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d117      	bne.n	8000356 <uart_communication_fsm+0xf6>
				HAL_UART_Transmit (&huart2 , (void*)str , sprintf (str , "\n%ld\n", ADC_Value), 1000);
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <uart_communication_fsm+0x108>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800032e:	4914      	ldr	r1, [pc, #80]	; (8000380 <uart_communication_fsm+0x120>)
 8000330:	4618      	mov	r0, r3
 8000332:	f002 ff7f 	bl	8003234 <siprintf>
 8000336:	4603      	mov	r3, r0
 8000338:	b29a      	uxth	r2, r3
 800033a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800033e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000342:	4810      	ldr	r0, [pc, #64]	; (8000384 <uart_communication_fsm+0x124>)
 8000344:	f002 fa59 	bl	80027fa <HAL_UART_Transmit>
				setTimer1(300);
 8000348:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800034c:	f000 f9c0 	bl	80006d0 <setTimer1>
			break;
 8000350:	e001      	b.n	8000356 <uart_communication_fsm+0xf6>
			break;
 8000352:	bf00      	nop
 8000354:	e000      	b.n	8000358 <uart_communication_fsm+0xf8>
			break;
 8000356:	bf00      	nop
	}
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000000 	.word	0x20000000
 8000364:	2000011c 	.word	0x2000011c
 8000368:	20000098 	.word	0x20000098
 800036c:	200000d6 	.word	0x200000d6
 8000370:	08003ac8 	.word	0x08003ac8
 8000374:	200000b8 	.word	0x200000b8
 8000378:	08003ae8 	.word	0x08003ae8
 800037c:	2000009c 	.word	0x2000009c
 8000380:	08003ac0 	.word	0x08003ac0
 8000384:	200000d8 	.word	0x200000d8

08000388 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2 ){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <HAL_UART_RxCpltCallback+0x50>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d119      	bne.n	80003ce <HAL_UART_RxCpltCallback+0x46>
		// HAL_UART_Transmit (& huart2 , &temp , 1, 50) ;
		buffer [ index_buffer ++] = temp ;
 800039a:	4b10      	ldr	r3, [pc, #64]	; (80003dc <HAL_UART_RxCpltCallback+0x54>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	1c5a      	adds	r2, r3, #1
 80003a0:	b2d1      	uxtb	r1, r2
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <HAL_UART_RxCpltCallback+0x54>)
 80003a4:	7011      	strb	r1, [r2, #0]
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <HAL_UART_RxCpltCallback+0x58>)
 80003aa:	7819      	ldrb	r1, [r3, #0]
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <HAL_UART_RxCpltCallback+0x5c>)
 80003ae:	5499      	strb	r1, [r3, r2]
		if( index_buffer == 30) index_buffer = 0;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <HAL_UART_RxCpltCallback+0x54>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b1e      	cmp	r3, #30
 80003b6:	d102      	bne.n	80003be <HAL_UART_RxCpltCallback+0x36>
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <HAL_UART_RxCpltCallback+0x54>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <HAL_UART_RxCpltCallback+0x60>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (& huart2 , &temp , 1);
 80003c4:	2201      	movs	r2, #1
 80003c6:	4906      	ldr	r1, [pc, #24]	; (80003e0 <HAL_UART_RxCpltCallback+0x58>)
 80003c8:	4808      	ldr	r0, [pc, #32]	; (80003ec <HAL_UART_RxCpltCallback+0x64>)
 80003ca:	f002 faa8 	bl	800291e <HAL_UART_Receive_IT>
	}
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40004400 	.word	0x40004400
 80003dc:	20000095 	.word	0x20000095
 80003e0:	20000094 	.word	0x20000094
 80003e4:	2000014c 	.word	0x2000014c
 80003e8:	20000096 	.word	0x20000096
 80003ec:	200000d8 	.word	0x200000d8

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f4:	f000 fb30 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f824 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f000 f926 	bl	800064c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000400:	f000 f870 	bl	80004e4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000404:	f000 f8f8 	bl	80005f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000408:	f000 f8aa 	bl	8000560 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	4909      	ldr	r1, [pc, #36]	; (8000434 <main+0x44>)
 8000410:	4809      	ldr	r0, [pc, #36]	; (8000438 <main+0x48>)
 8000412:	f002 fa84 	bl	800291e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <main+0x4c>)
 8000418:	f001 fe0e 	bl	8002038 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if( buffer_flag == 1){
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <main+0x50>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d104      	bne.n	800042e <main+0x3e>
		  command_parser_fsm ();
 8000424:	f7ff feae 	bl	8000184 <command_parser_fsm>
		  buffer_flag = 0;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <main+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
	 }

	 uart_communication_fsm ();
 800042e:	f7ff ff17 	bl	8000260 <uart_communication_fsm>
	 if( buffer_flag == 1){
 8000432:	e7f3      	b.n	800041c <main+0x2c>
 8000434:	20000094 	.word	0x20000094
 8000438:	200000d8 	.word	0x200000d8
 800043c:	2000016c 	.word	0x2000016c
 8000440:	20000096 	.word	0x20000096

08000444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b094      	sub	sp, #80	; 0x50
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fee6 	bl	8003224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000474:	2302      	movs	r3, #2
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047c:	2310      	movs	r3, #16
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000480:	2300      	movs	r3, #0
 8000482:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000488:	4618      	mov	r0, r3
 800048a:	f001 f8b5 	bl	80015f8 <HAL_RCC_OscConfig>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000494:	f000 f916 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000498:	230f      	movs	r3, #15
 800049a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fb20 	bl	8001af8 <HAL_RCC_ClockConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004be:	f000 f901 	bl	80006c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004c2:	2302      	movs	r3, #2
 80004c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 fcad 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004d8:	f000 f8f4 	bl	80006c4 <Error_Handler>
  }
}
 80004dc:	bf00      	nop
 80004de:	3750      	adds	r7, #80	; 0x50
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_ADC1_Init+0x74>)
 80004f6:	4a19      	ldr	r2, [pc, #100]	; (800055c <MX_ADC1_Init+0x78>)
 80004f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_ADC1_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <MX_ADC1_Init+0x74>)
 8000502:	2201      	movs	r2, #1
 8000504:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_ADC1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <MX_ADC1_Init+0x74>)
 800050e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <MX_ADC1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_ADC1_Init+0x74>)
 800051c:	2201      	movs	r2, #1
 800051e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <MX_ADC1_Init+0x74>)
 8000522:	f000 fafb 	bl	8000b1c <HAL_ADC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800052c:	f000 f8ca 	bl	80006c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000534:	2301      	movs	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_ADC1_Init+0x74>)
 8000542:	f000 fbcf 	bl	8000ce4 <HAL_ADC_ConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800054c:	f000 f8ba 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000011c 	.word	0x2000011c
 800055c:	40012400 	.word	0x40012400

08000560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000566:	f107 0308 	add.w	r3, r7, #8
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_TIM2_Init+0x94>)
 800057e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000582:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_TIM2_Init+0x94>)
 8000586:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800058a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <MX_TIM2_Init+0x94>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_TIM2_Init+0x94>)
 8000594:	2209      	movs	r2, #9
 8000596:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <MX_TIM2_Init+0x94>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_TIM2_Init+0x94>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005a4:	4813      	ldr	r0, [pc, #76]	; (80005f4 <MX_TIM2_Init+0x94>)
 80005a6:	f001 fcf7 	bl	8001f98 <HAL_TIM_Base_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005b0:	f000 f888 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <MX_TIM2_Init+0x94>)
 80005c2:	f001 fe8d 	bl	80022e0 <HAL_TIM_ConfigClockSource>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005cc:	f000 f87a 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_TIM2_Init+0x94>)
 80005de:	f002 f855 	bl	800268c <HAL_TIMEx_MasterConfigSynchronization>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005e8:	f000 f86c 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000016c 	.word	0x2000016c

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_USART2_UART_Init+0x50>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000604:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000630:	f002 f896 	bl	8002760 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063a:	f000 f843 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000d8 	.word	0x200000d8
 8000648:	40004400 	.word	0x40004400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_GPIO_Init+0x5c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <MX_GPIO_Init+0x5c>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_GPIO_Init+0x5c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2120      	movs	r1, #32
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <MX_GPIO_Init+0x60>)
 800067e:	f000 ffa3 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000682:	2320      	movs	r3, #32
 8000684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2302      	movs	r3, #2
 8000690:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_GPIO_Init+0x60>)
 800069a:	f000 fe1b 	bl	80012d4 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010800 	.word	0x40010800

080006b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	timeRun();
 80006b8:	f000 f81e 	bl	80006f8 <timeRun>

}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <setTimer1>:

int timer1_flag=0;
int timer1_counter=0;
int timer2_flag=0;
int timer2_counter=0;
void setTimer1(int duration) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <setTimer1+0x20>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <setTimer1+0x24>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]

}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	2000009c 	.word	0x2000009c

080006f8 <timeRun>:
void setTimer2(int duration) {
	timer2_counter=duration;
	timer2_flag=0;
}
void timeRun() {
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	if (timer1_counter>0) {
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <timeRun+0x4c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	dd0b      	ble.n	800071c <timeRun+0x24>
		timer1_counter--;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <timeRun+0x4c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <timeRun+0x4c>)
 800070c:	6013      	str	r3, [r2, #0]
		if (timer1_counter<=0) {
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <timeRun+0x4c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	dc02      	bgt.n	800071c <timeRun+0x24>
			timer1_flag=1;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <timeRun+0x50>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0) {
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <timeRun+0x54>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dd0b      	ble.n	800073c <timeRun+0x44>
			timer2_counter--;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <timeRun+0x54>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3b01      	subs	r3, #1
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <timeRun+0x54>)
 800072c:	6013      	str	r3, [r2, #0]
			if (timer2_counter<=0) {
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <timeRun+0x54>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	dc02      	bgt.n	800073c <timeRun+0x44>
				timer2_flag=1;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <timeRun+0x58>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
			}
		}
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	200000a0 	.word	0x200000a0
 8000748:	2000009c 	.word	0x2000009c
 800074c:	200000a8 	.word	0x200000a8
 8000750:	200000a4 	.word	0x200000a4

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <HAL_MspInit+0x5c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_MspInit+0x5c>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_MspInit+0x5c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x5c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_MspInit+0x60>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_MspInit+0x60>)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000

080007b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <HAL_ADC_MspInit+0x6c>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d121      	bne.n	800081c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_ADC_MspInit+0x70>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <HAL_ADC_MspInit+0x70>)
 80007de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_ADC_MspInit+0x70>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_ADC_MspInit+0x70>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <HAL_ADC_MspInit+0x70>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_ADC_MspInit+0x70>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <HAL_ADC_MspInit+0x74>)
 8000818:	f000 fd5c 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40012400 	.word	0x40012400
 8000828:	40021000 	.word	0x40021000
 800082c:	40010800 	.word	0x40010800

08000830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000840:	d113      	bne.n	800086a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_TIM_Base_MspInit+0x44>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <HAL_TIM_Base_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_TIM_Base_MspInit+0x44>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	201c      	movs	r0, #28
 8000860:	f000 fc51 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000864:	201c      	movs	r0, #28
 8000866:	f000 fc6a 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <HAL_UART_MspInit+0x98>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d137      	bne.n	8000908 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <HAL_UART_MspInit+0x9c>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <HAL_UART_MspInit+0x9c>)
 800089e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a2:	61d3      	str	r3, [r2, #28]
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <HAL_UART_MspInit+0x9c>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_UART_MspInit+0x9c>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x9c>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_MspInit+0x9c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008c8:	2304      	movs	r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	480f      	ldr	r0, [pc, #60]	; (8000918 <HAL_UART_MspInit+0xa0>)
 80008dc:	f000 fcfa 	bl	80012d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e0:	2308      	movs	r3, #8
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_UART_MspInit+0xa0>)
 80008f4:	f000 fcee 	bl	80012d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2026      	movs	r0, #38	; 0x26
 80008fe:	f000 fc02 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000902:	2026      	movs	r0, #38	; 0x26
 8000904:	f000 fc1b 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40004400 	.word	0x40004400
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000962:	f000 f8bf 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <TIM2_IRQHandler+0x10>)
 8000972:	f001 fbad 	bl	80020d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000016c 	.word	0x2000016c

08000980 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <USART2_IRQHandler+0x10>)
 8000986:	f001 fffb 	bl	8002980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000d8 	.word	0x200000d8

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f002 fc04 	bl	80031d0 <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20002800 	.word	0x20002800
 80009f4:	00000400 	.word	0x00000400
 80009f8:	200000ac 	.word	0x200000ac
 80009fc:	200001c8 	.word	0x200001c8

08000a00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a32:	f7ff ffe5 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a36:	f002 fbd1 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fcd9 	bl	80003f0 <main>
  bx lr
 8000a3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a48:	08003b6c 	.word	0x08003b6c
  ldr r2, =_sbss
 8000a4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a50:	200001c8 	.word	0x200001c8

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_Init+0x28>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_Init+0x28>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 fb41 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f000 f808 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a74:	f7ff fe6e 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x54>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x58>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fb59 	bl	800115a <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00e      	b.n	8000ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d80a      	bhi.n	8000ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f000 fb21 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <HAL_InitTick+0x5c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <HAL_IncTick+0x20>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	2000000c 	.word	0x2000000c
 8000b04:	200001b4 	.word	0x200001b4

08000b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	200001b4 	.word	0x200001b4

08000b1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e0be      	b.n	8000cbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d109      	bne.n	8000b60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fe2c 	bl	80007b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f9b7 	bl	8000ed4 <ADC_ConversionStop_Disable>
 8000b66:	4603      	mov	r3, r0
 8000b68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 8099 	bne.w	8000caa <HAL_ADC_Init+0x18e>
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8095 	bne.w	8000caa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b88:	f023 0302 	bic.w	r3, r3, #2
 8000b8c:	f043 0202 	orr.w	r2, r3, #2
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7b1b      	ldrb	r3, [r3, #12]
 8000ba2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb4:	d003      	beq.n	8000bbe <HAL_ADC_Init+0xa2>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d102      	bne.n	8000bc4 <HAL_ADC_Init+0xa8>
 8000bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc2:	e000      	b.n	8000bc6 <HAL_ADC_Init+0xaa>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7d1b      	ldrb	r3, [r3, #20]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d119      	bne.n	8000c08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7b1b      	ldrb	r3, [r3, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	035a      	lsls	r2, r3, #13
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	e00b      	b.n	8000c08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf4:	f043 0220 	orr.w	r2, r3, #32
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	f043 0201 	orr.w	r2, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <HAL_ADC_Init+0x1a8>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c38:	d003      	beq.n	8000c42 <HAL_ADC_Init+0x126>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d104      	bne.n	8000c4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	051b      	lsls	r3, r3, #20
 8000c4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_ADC_Init+0x1ac>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d10b      	bne.n	8000c88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7a:	f023 0303 	bic.w	r3, r3, #3
 8000c7e:	f043 0201 	orr.w	r2, r3, #1
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c86:	e018      	b.n	8000cba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f023 0312 	bic.w	r3, r3, #18
 8000c90:	f043 0210 	orr.w	r2, r3, #16
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca8:	e007      	b.n	8000cba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	f043 0210 	orr.w	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	ffe1f7fd 	.word	0xffe1f7fd
 8000cc8:	ff1f0efe 	.word	0xff1f0efe

08000ccc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <HAL_ADC_ConfigChannel+0x20>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e0dc      	b.n	8000ebe <HAL_ADC_ConfigChannel+0x1da>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b06      	cmp	r3, #6
 8000d12:	d81c      	bhi.n	8000d4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	3b05      	subs	r3, #5
 8000d26:	221f      	movs	r2, #31
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	4019      	ands	r1, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3b05      	subs	r3, #5
 8000d40:	fa00 f203 	lsl.w	r2, r0, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4c:	e03c      	b.n	8000dc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b0c      	cmp	r3, #12
 8000d54:	d81c      	bhi.n	8000d90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	3b23      	subs	r3, #35	; 0x23
 8000d68:	221f      	movs	r2, #31
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	4019      	ands	r1, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	3b23      	subs	r3, #35	; 0x23
 8000d82:	fa00 f203 	lsl.w	r2, r0, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d8e:	e01b      	b.n	8000dc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	3b41      	subs	r3, #65	; 0x41
 8000da2:	221f      	movs	r2, #31
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	4019      	ands	r1, r3
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	3b41      	subs	r3, #65	; 0x41
 8000dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b09      	cmp	r3, #9
 8000dce:	d91c      	bls.n	8000e0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68d9      	ldr	r1, [r3, #12]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	3b1e      	subs	r3, #30
 8000de2:	2207      	movs	r2, #7
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4019      	ands	r1, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6898      	ldr	r0, [r3, #8]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b1e      	subs	r3, #30
 8000dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	e019      	b.n	8000e3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6919      	ldr	r1, [r3, #16]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4019      	ands	r1, r3
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	6898      	ldr	r0, [r3, #8]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	fa00 f203 	lsl.w	r2, r0, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b10      	cmp	r3, #16
 8000e44:	d003      	beq.n	8000e4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e4a:	2b11      	cmp	r3, #17
 8000e4c:	d132      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d125      	bne.n	8000ea4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d126      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b10      	cmp	r3, #16
 8000e7c:	d11a      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_ADC_ConfigChannel+0x1e8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	0c9a      	lsrs	r2, r3, #18
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e94:	e002      	b.n	8000e9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f9      	bne.n	8000e96 <HAL_ADC_ConfigChannel+0x1b2>
 8000ea2:	e007      	b.n	8000eb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	f043 0220 	orr.w	r2, r3, #32
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40012400 	.word	0x40012400
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	431bde83 	.word	0x431bde83

08000ed4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d12e      	bne.n	8000f4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000efe:	f7ff fe03 	bl	8000b08 <HAL_GetTick>
 8000f02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f04:	e01b      	b.n	8000f3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f06:	f7ff fdff 	bl	8000b08 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d914      	bls.n	8000f3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10d      	bne.n	8000f3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	f043 0210 	orr.w	r2, r3, #16
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e007      	b.n	8000f4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d0dc      	beq.n	8000f06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4906      	ldr	r1, [pc, #24]	; (8000ff0 <__NVIC_EnableIRQ+0x34>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff90 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff2d 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff42 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff90 	bl	8001048 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff35 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001184:	2b02      	cmp	r3, #2
 8001186:	d008      	beq.n	800119a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e020      	b.n	80011dc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 020e 	bic.w	r2, r2, #14
 80011a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c2:	2101      	movs	r1, #1
 80011c4:	fa01 f202 	lsl.w	r2, r1, r2
 80011c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d005      	beq.n	800120a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2204      	movs	r2, #4
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e051      	b.n	80012ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 020e 	bic.w	r2, r2, #14
 8001218:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <HAL_DMA_Abort_IT+0xd0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d029      	beq.n	8001288 <HAL_DMA_Abort_IT+0xa0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <HAL_DMA_Abort_IT+0xd4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d022      	beq.n	8001284 <HAL_DMA_Abort_IT+0x9c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <HAL_DMA_Abort_IT+0xd8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d01a      	beq.n	800127e <HAL_DMA_Abort_IT+0x96>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_DMA_Abort_IT+0xdc>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d012      	beq.n	8001278 <HAL_DMA_Abort_IT+0x90>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <HAL_DMA_Abort_IT+0xe0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00a      	beq.n	8001272 <HAL_DMA_Abort_IT+0x8a>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_DMA_Abort_IT+0xe4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <HAL_DMA_Abort_IT+0x84>
 8001266:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800126a:	e00e      	b.n	800128a <HAL_DMA_Abort_IT+0xa2>
 800126c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001270:	e00b      	b.n	800128a <HAL_DMA_Abort_IT+0xa2>
 8001272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001276:	e008      	b.n	800128a <HAL_DMA_Abort_IT+0xa2>
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	e005      	b.n	800128a <HAL_DMA_Abort_IT+0xa2>
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	e002      	b.n	800128a <HAL_DMA_Abort_IT+0xa2>
 8001284:	2310      	movs	r3, #16
 8001286:	e000      	b.n	800128a <HAL_DMA_Abort_IT+0xa2>
 8001288:	2301      	movs	r3, #1
 800128a:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_DMA_Abort_IT+0xe8>)
 800128c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	4798      	blx	r3
    } 
  }
  return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020008 	.word	0x40020008
 80012bc:	4002001c 	.word	0x4002001c
 80012c0:	40020030 	.word	0x40020030
 80012c4:	40020044 	.word	0x40020044
 80012c8:	40020058 	.word	0x40020058
 80012cc:	4002006c 	.word	0x4002006c
 80012d0:	40020000 	.word	0x40020000

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b08b      	sub	sp, #44	; 0x2c
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e6:	e148      	b.n	800157a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e8:	2201      	movs	r2, #1
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8137 	bne.w	8001574 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4aa3      	ldr	r2, [pc, #652]	; (8001598 <HAL_GPIO_Init+0x2c4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d05e      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001310:	4aa1      	ldr	r2, [pc, #644]	; (8001598 <HAL_GPIO_Init+0x2c4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d875      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001316:	4aa1      	ldr	r2, [pc, #644]	; (800159c <HAL_GPIO_Init+0x2c8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d058      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 800131c:	4a9f      	ldr	r2, [pc, #636]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d86f      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001322:	4a9f      	ldr	r2, [pc, #636]	; (80015a0 <HAL_GPIO_Init+0x2cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d052      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001328:	4a9d      	ldr	r2, [pc, #628]	; (80015a0 <HAL_GPIO_Init+0x2cc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d869      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800132e:	4a9d      	ldr	r2, [pc, #628]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d04c      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001334:	4a9b      	ldr	r2, [pc, #620]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d863      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800133a:	4a9b      	ldr	r2, [pc, #620]	; (80015a8 <HAL_GPIO_Init+0x2d4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d046      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001340:	4a99      	ldr	r2, [pc, #612]	; (80015a8 <HAL_GPIO_Init+0x2d4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d85d      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d82a      	bhi.n	80013a0 <HAL_GPIO_Init+0xcc>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d859      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <HAL_GPIO_Init+0x80>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013a9 	.word	0x080013a9
 800135c:	080013bb 	.word	0x080013bb
 8001360:	080013fd 	.word	0x080013fd
 8001364:	08001403 	.word	0x08001403
 8001368:	08001403 	.word	0x08001403
 800136c:	08001403 	.word	0x08001403
 8001370:	08001403 	.word	0x08001403
 8001374:	08001403 	.word	0x08001403
 8001378:	08001403 	.word	0x08001403
 800137c:	08001403 	.word	0x08001403
 8001380:	08001403 	.word	0x08001403
 8001384:	08001403 	.word	0x08001403
 8001388:	08001403 	.word	0x08001403
 800138c:	08001403 	.word	0x08001403
 8001390:	08001403 	.word	0x08001403
 8001394:	08001403 	.word	0x08001403
 8001398:	080013b1 	.word	0x080013b1
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	4a82      	ldr	r2, [pc, #520]	; (80015ac <HAL_GPIO_Init+0x2d8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a6:	e02c      	b.n	8001402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e029      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	3304      	adds	r3, #4
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e024      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	3308      	adds	r3, #8
 80013c0:	623b      	str	r3, [r7, #32]
          break;
 80013c2:	e01f      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	330c      	adds	r3, #12
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e01a      	b.n	8001404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d6:	2304      	movs	r3, #4
 80013d8:	623b      	str	r3, [r7, #32]
          break;
 80013da:	e013      	b.n	8001404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	611a      	str	r2, [r3, #16]
          break;
 80013ee:	e009      	b.n	8001404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	615a      	str	r2, [r3, #20]
          break;
 80013fa:	e003      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x130>
          break;
 8001402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d801      	bhi.n	800140e <HAL_GPIO_Init+0x13a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_Init+0x13e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d802      	bhi.n	8001420 <HAL_GPIO_Init+0x14c>
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x152>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	3b08      	subs	r3, #8
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	210f      	movs	r1, #15
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	6a39      	ldr	r1, [r7, #32]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8090 	beq.w	8001574 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001454:	4b56      	ldr	r3, [pc, #344]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a55      	ldr	r2, [pc, #340]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800146c:	4a51      	ldr	r2, [pc, #324]	; (80015b4 <HAL_GPIO_Init+0x2e0>)
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a49      	ldr	r2, [pc, #292]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00d      	beq.n	80014b4 <HAL_GPIO_Init+0x1e0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a48      	ldr	r2, [pc, #288]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x1dc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <HAL_GPIO_Init+0x2ec>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_GPIO_Init+0x1d8>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e004      	b.n	80014b6 <HAL_GPIO_Init+0x1e2>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x1e2>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_Init+0x1e2>
 80014b4:	2300      	movs	r3, #0
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c6:	493b      	ldr	r1, [pc, #236]	; (80015b4 <HAL_GPIO_Init+0x2e0>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4937      	ldr	r1, [pc, #220]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4933      	ldr	r1, [pc, #204]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	492d      	ldr	r1, [pc, #180]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	4929      	ldr	r1, [pc, #164]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001520:	4013      	ands	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	4923      	ldr	r1, [pc, #140]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	491f      	ldr	r1, [pc, #124]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001548:	4013      	ands	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	4919      	ldr	r1, [pc, #100]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	60cb      	str	r3, [r1, #12]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	4915      	ldr	r1, [pc, #84]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001570:	4013      	ands	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	3301      	adds	r3, #1
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	f47f aeaf 	bne.w	80012e8 <HAL_GPIO_Init+0x14>
  }
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	372c      	adds	r7, #44	; 0x2c
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	10320000 	.word	0x10320000
 800159c:	10310000 	.word	0x10310000
 80015a0:	10220000 	.word	0x10220000
 80015a4:	10210000 	.word	0x10210000
 80015a8:	10120000 	.word	0x10120000
 80015ac:	10110000 	.word	0x10110000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40010800 	.word	0x40010800
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015e4:	e003      	b.n	80015ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	041a      	lsls	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	611a      	str	r2, [r3, #16]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e26c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8087 	beq.w	8001726 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001618:	4b92      	ldr	r3, [pc, #584]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b04      	cmp	r3, #4
 8001622:	d00c      	beq.n	800163e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001624:	4b8f      	ldr	r3, [pc, #572]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d112      	bne.n	8001656 <HAL_RCC_OscConfig+0x5e>
 8001630:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d10b      	bne.n	8001656 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163e:	4b89      	ldr	r3, [pc, #548]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d06c      	beq.n	8001724 <HAL_RCC_OscConfig+0x12c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d168      	bne.n	8001724 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e246      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x76>
 8001660:	4b80      	ldr	r3, [pc, #512]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a7f      	ldr	r2, [pc, #508]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e02e      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x98>
 8001676:	4b7b      	ldr	r3, [pc, #492]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7a      	ldr	r2, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800167c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b78      	ldr	r3, [pc, #480]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a77      	ldr	r2, [pc, #476]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0xbc>
 800169a:	4b72      	ldr	r3, [pc, #456]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a71      	ldr	r2, [pc, #452]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 80016b4:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a6a      	ldr	r2, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a67      	ldr	r2, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa18 	bl	8000b08 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa14 	bl	8000b08 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1fa      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0xe4>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa04 	bl	8000b08 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fa00 	bl	8000b08 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1e6      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x10c>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d063      	beq.n	80017fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001732:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x18c>
 800174a:	4b46      	ldr	r3, [pc, #280]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x176>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e1ba      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4939      	ldr	r1, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	e03a      	b.n	80017fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_RCC_OscConfig+0x270>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff f9b9 	bl	8000b08 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff f9b5 	bl	8000b08 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e19b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4927      	ldr	r1, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x270>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f998 	bl	8000b08 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff f994 	bl	8000b08 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e17a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d03a      	beq.n	800187c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d019      	beq.n	8001842 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff f978 	bl	8000b08 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff f974 	bl	8000b08 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e15a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f000 fad8 	bl	8001df0 <RCC_Delay>
 8001840:	e01c      	b.n	800187c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff f95e 	bl	8000b08 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184e:	e00f      	b.n	8001870 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff f95a 	bl	8000b08 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d908      	bls.n	8001870 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e140      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	42420000 	.word	0x42420000
 800186c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	4b9e      	ldr	r3, [pc, #632]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e9      	bne.n	8001850 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80a6 	beq.w	80019d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b97      	ldr	r3, [pc, #604]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b94      	ldr	r3, [pc, #592]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a93      	ldr	r2, [pc, #588]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b91      	ldr	r3, [pc, #580]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b8e      	ldr	r3, [pc, #568]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a8a      	ldr	r2, [pc, #552]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff f91b 	bl	8000b08 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7ff f917 	bl	8000b08 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b64      	cmp	r3, #100	; 0x64
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0fd      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x4f8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x312>
 80018fc:	4b7b      	ldr	r3, [pc, #492]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a7a      	ldr	r2, [pc, #488]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e02d      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x334>
 8001912:	4b76      	ldr	r3, [pc, #472]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a75      	ldr	r2, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b73      	ldr	r3, [pc, #460]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a72      	ldr	r2, [pc, #456]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
 800192a:	e01c      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d10c      	bne.n	800194e <HAL_RCC_OscConfig+0x356>
 8001934:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4a6c      	ldr	r2, [pc, #432]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6213      	str	r3, [r2, #32]
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4a69      	ldr	r2, [pc, #420]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	e00b      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a66      	ldr	r2, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	4b64      	ldr	r3, [pc, #400]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a63      	ldr	r2, [pc, #396]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d015      	beq.n	800199a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff f8cb 	bl	8000b08 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff f8c7 	bl	8000b08 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0ab      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ee      	beq.n	8001976 <HAL_RCC_OscConfig+0x37e>
 8001998:	e014      	b.n	80019c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff f8b5 	bl	8000b08 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff f8b1 	bl	8000b08 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e095      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ee      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b48      	ldr	r3, [pc, #288]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a47      	ldr	r2, [pc, #284]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8081 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e0:	4b42      	ldr	r3, [pc, #264]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d061      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d146      	bne.n	8001a82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_RCC_OscConfig+0x4fc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f885 	bl	8000b08 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f881 	bl	8000b08 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e067      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	4b35      	ldr	r3, [pc, #212]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d108      	bne.n	8001a3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a2a:	4b30      	ldr	r3, [pc, #192]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	492d      	ldr	r1, [pc, #180]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a19      	ldr	r1, [r3, #32]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	4927      	ldr	r1, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x4fc>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f855 	bl	8000b08 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f851 	bl	8000b08 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e037      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x46a>
 8001a80:	e02f      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_RCC_OscConfig+0x4fc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff f83e 	bl	8000b08 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f83a 	bl	8000b08 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e020      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x498>
 8001aae:	e018      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e013      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40007000 	.word	0x40007000
 8001af4:	42420060 	.word	0x42420060

08001af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0d0      	b.n	8001cae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d910      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 0207 	bic.w	r2, r3, #7
 8001b22:	4965      	ldr	r1, [pc, #404]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0b8      	b.n	8001cae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d020      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a58      	ldr	r2, [pc, #352]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b6c:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b78:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	494d      	ldr	r1, [pc, #308]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d040      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d115      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e07f      	b.n	8001cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	4b41      	ldr	r3, [pc, #260]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e073      	b.n	8001cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e06b      	b.n	8001cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f023 0203 	bic.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4936      	ldr	r1, [pc, #216]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be8:	f7fe ff8e 	bl	8000b08 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7fe ff8a 	bl	8000b08 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e053      	b.n	8001cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 020c 	and.w	r2, r3, #12
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1eb      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d210      	bcs.n	8001c48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0207 	bic.w	r2, r3, #7
 8001c2e:	4922      	ldr	r1, [pc, #136]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e032      	b.n	8001cae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4916      	ldr	r1, [pc, #88]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	490e      	ldr	r1, [pc, #56]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c86:	f000 f821 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	490a      	ldr	r1, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	5ccb      	ldrb	r3, [r1, r3]
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe feec 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08003b18 	.word	0x08003b18
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ccc:	b490      	push	{r4, r7}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cd4:	1d3c      	adds	r4, r7, #4
 8001cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cdc:	f240 2301 	movw	r3, #513	; 0x201
 8001ce0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d002      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x40>
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x46>
 8001d0a:	e02d      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0e:	623b      	str	r3, [r7, #32]
      break;
 8001d10:	e02d      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	0c9b      	lsrs	r3, r3, #18
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d1e:	4413      	add	r3, r2
 8001d20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c5b      	lsrs	r3, r3, #17
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d3e:	4413      	add	r3, r2
 8001d40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4a:	fb02 f203 	mul.w	r2, r2, r3
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	e004      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	623b      	str	r3, [r7, #32]
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6a:	623b      	str	r3, [r7, #32]
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc90      	pop	{r4, r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	08003b08 	.word	0x08003b08
 8001d80:	40021000 	.word	0x40021000
 8001d84:	007a1200 	.word	0x007a1200
 8001d88:	003d0900 	.word	0x003d0900

08001d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da4:	f7ff fff2 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08003b28 	.word	0x08003b28

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08003b28 	.word	0x08003b28

08001df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <RCC_Delay+0x34>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <RCC_Delay+0x38>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0a5b      	lsrs	r3, r3, #9
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e0c:	bf00      	nop
  }
  while (Delay --);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <RCC_Delay+0x1c>
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000004 	.word	0x20000004
 8001e28:	10624dd3 	.word	0x10624dd3

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d07d      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	61d3      	str	r3, [r2, #28]
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a42      	ldr	r2, [pc, #264]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fe3c 	bl	8000b08 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	e008      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7fe fe38 	bl	8000b08 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e06d      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d02e      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d027      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ee6:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d014      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7fe fe07 	bl	8000b08 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fe03 	bl	8000b08 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e036      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4917      	ldr	r1, [pc, #92]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	490b      	ldr	r1, [pc, #44]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4904      	ldr	r1, [pc, #16]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42420440 	.word	0x42420440

08001f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e041      	b.n	800202e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fc36 	bl	8000830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f000 fa6a 	bl	80024b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d001      	beq.n	8002050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e035      	b.n	80020bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <HAL_TIM_Base_Start_IT+0x90>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_TIM_Base_Start_IT+0x4e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207a:	d004      	beq.n	8002086 <HAL_TIM_Base_Start_IT+0x4e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_TIM_Base_Start_IT+0x94>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d111      	bne.n	80020aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b06      	cmp	r3, #6
 8002096:	d010      	beq.n	80020ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a8:	e007      	b.n	80020ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40000400 	.word	0x40000400

080020d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d122      	bne.n	800212c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d11b      	bne.n	800212c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0202 	mvn.w	r2, #2
 80020fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f9b1 	bl	800247a <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f9a4 	bl	8002468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f9b3 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b04      	cmp	r3, #4
 8002138:	d122      	bne.n	8002180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b04      	cmp	r3, #4
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0204 	mvn.w	r2, #4
 8002150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f987 	bl	800247a <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f97a 	bl	8002468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f989 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b08      	cmp	r3, #8
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b08      	cmp	r3, #8
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0208 	mvn.w	r2, #8
 80021a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2204      	movs	r2, #4
 80021aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f95d 	bl	800247a <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f950 	bl	8002468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f95f 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0210 	mvn.w	r2, #16
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2208      	movs	r2, #8
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f933 	bl	800247a <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f926 	bl	8002468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f935 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10e      	bne.n	8002254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0201 	mvn.w	r2, #1
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fa2e 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	2b80      	cmp	r3, #128	; 0x80
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa67 	bl	800274e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f8f9 	bl	800249e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d10e      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d107      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0220 	mvn.w	r2, #32
 80022d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa32 	bl	800273c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_TIM_ConfigClockSource+0x18>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e0b3      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x180>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800231e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002330:	d03e      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0xd0>
 8002332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002336:	f200 8087 	bhi.w	8002448 <HAL_TIM_ConfigClockSource+0x168>
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	f000 8085 	beq.w	800244c <HAL_TIM_ConfigClockSource+0x16c>
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002346:	d87f      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002348:	2b70      	cmp	r3, #112	; 0x70
 800234a:	d01a      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0xa2>
 800234c:	2b70      	cmp	r3, #112	; 0x70
 800234e:	d87b      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002350:	2b60      	cmp	r3, #96	; 0x60
 8002352:	d050      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x116>
 8002354:	2b60      	cmp	r3, #96	; 0x60
 8002356:	d877      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002358:	2b50      	cmp	r3, #80	; 0x50
 800235a:	d03c      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0xf6>
 800235c:	2b50      	cmp	r3, #80	; 0x50
 800235e:	d873      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d058      	beq.n	8002416 <HAL_TIM_ConfigClockSource+0x136>
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d86f      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002368:	2b30      	cmp	r3, #48	; 0x30
 800236a:	d064      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x156>
 800236c:	2b30      	cmp	r3, #48	; 0x30
 800236e:	d86b      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002370:	2b20      	cmp	r3, #32
 8002372:	d060      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x156>
 8002374:	2b20      	cmp	r3, #32
 8002376:	d867      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05c      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x156>
 800237c:	2b10      	cmp	r3, #16
 800237e:	d05a      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002380:	e062      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f000 f95c 	bl	800264e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	609a      	str	r2, [r3, #8]
      break;
 80023ae:	e04e      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6899      	ldr	r1, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f000 f945 	bl	800264e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d2:	609a      	str	r2, [r3, #8]
      break;
 80023d4:	e03b      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f000 f8bc 	bl	8002560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2150      	movs	r1, #80	; 0x50
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f913 	bl	800261a <TIM_ITRx_SetConfig>
      break;
 80023f4:	e02b      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	461a      	mov	r2, r3
 8002404:	f000 f8da 	bl	80025bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2160      	movs	r1, #96	; 0x60
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f903 	bl	800261a <TIM_ITRx_SetConfig>
      break;
 8002414:	e01b      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	461a      	mov	r2, r3
 8002424:	f000 f89c 	bl	8002560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f8f3 	bl	800261a <TIM_ITRx_SetConfig>
      break;
 8002434:	e00b      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f000 f8ea 	bl	800261a <TIM_ITRx_SetConfig>
        break;
 8002446:	e002      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002448:	bf00      	nop
 800244a:	e000      	b.n	800244e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800244c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a25      	ldr	r2, [pc, #148]	; (8002558 <TIM_Base_SetConfig+0xa8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <TIM_Base_SetConfig+0x28>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	d003      	beq.n	80024d8 <TIM_Base_SetConfig+0x28>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a22      	ldr	r2, [pc, #136]	; (800255c <TIM_Base_SetConfig+0xac>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d108      	bne.n	80024ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <TIM_Base_SetConfig+0xa8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <TIM_Base_SetConfig+0x52>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d003      	beq.n	8002502 <TIM_Base_SetConfig+0x52>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <TIM_Base_SetConfig+0xac>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d108      	bne.n	8002514 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <TIM_Base_SetConfig+0xa8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d103      	bne.n	8002548 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	615a      	str	r2, [r3, #20]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40000400 	.word	0x40000400

08002560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f023 0201 	bic.w	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800258a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f023 030a 	bic.w	r3, r3, #10
 800259c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	621a      	str	r2, [r3, #32]
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f023 0210 	bic.w	r2, r3, #16
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	031b      	lsls	r3, r3, #12
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	f043 0307 	orr.w	r3, r3, #7
 800263c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800264e:	b480      	push	{r7}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	021a      	lsls	r2, r3, #8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	431a      	orrs	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4313      	orrs	r3, r2
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	609a      	str	r2, [r3, #8]
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e041      	b.n	8002728 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f0:	d004      	beq.n	80026fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10c      	bne.n	8002716 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002702:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	4313      	orrs	r3, r2
 800270c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40000400 	.word	0x40000400

0800273c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e03f      	b.n	80027f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe f876 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fc85 	bl	80030b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b08a      	sub	sp, #40	; 0x28
 80027fe:	af02      	add	r7, sp, #8
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	d17c      	bne.n	8002914 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_UART_Transmit+0x2c>
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e075      	b.n	8002916 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_UART_Transmit+0x3e>
 8002834:	2302      	movs	r3, #2
 8002836:	e06e      	b.n	8002916 <HAL_UART_Transmit+0x11c>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2221      	movs	r2, #33	; 0x21
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800284e:	f7fe f95b 	bl	8000b08 <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002868:	d108      	bne.n	800287c <HAL_UART_Transmit+0x82>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e003      	b.n	8002884 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800288c:	e02a      	b.n	80028e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2200      	movs	r2, #0
 8002896:	2180      	movs	r1, #128	; 0x80
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fa38 	bl	8002d0e <UART_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e036      	b.n	8002916 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10b      	bne.n	80028c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	3302      	adds	r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	e007      	b.n	80028d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	3301      	adds	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1cf      	bne.n	800288e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2140      	movs	r1, #64	; 0x40
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fa08 	bl	8002d0e <UART_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e006      	b.n	8002916 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	4613      	mov	r3, r2
 800292a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	d11d      	bne.n	8002974 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_UART_Receive_IT+0x26>
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e016      	b.n	8002976 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_UART_Receive_IT+0x38>
 8002952:	2302      	movs	r3, #2
 8002954:	e00f      	b.n	8002976 <HAL_UART_Receive_IT+0x58>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	461a      	mov	r2, r3
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fa19 	bl	8002da2 <UART_Start_Receive_IT>
 8002970:	4603      	mov	r3, r0
 8002972:	e000      	b.n	8002976 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_UART_IRQHandler+0x52>
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fac9 	bl	8002f62 <UART_Receive_IT>
      return;
 80029d0:	e17b      	b.n	8002cca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80b1 	beq.w	8002b3c <HAL_UART_IRQHandler+0x1bc>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_UART_IRQHandler+0x70>
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80a6 	beq.w	8002b3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_UART_IRQHandler+0x90>
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_UART_IRQHandler+0xb0>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f043 0202 	orr.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_UART_IRQHandler+0xd0>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0204 	orr.w	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00f      	beq.n	8002a7a <HAL_UART_IRQHandler+0xfa>
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <HAL_UART_IRQHandler+0xee>
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 811e 	beq.w	8002cc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_UART_IRQHandler+0x11e>
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa62 	bl	8002f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x146>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d031      	beq.n	8002b2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f9a4 	bl	8002e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d023      	beq.n	8002b22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d013      	beq.n	8002b1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	4a76      	ldr	r2, [pc, #472]	; (8002cd0 <HAL_UART_IRQHandler+0x350>)
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fb72 	bl	80011e8 <HAL_DMA_Abort_IT>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d016      	beq.n	8002b38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b14:	4610      	mov	r0, r2
 8002b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	e00e      	b.n	8002b38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8e3 	bl	8002ce6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b20:	e00a      	b.n	8002b38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8df 	bl	8002ce6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	e006      	b.n	8002b38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8db 	bl	8002ce6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b36:	e0c3      	b.n	8002cc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b38:	bf00      	nop
    return;
 8002b3a:	e0c1      	b.n	8002cc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f040 80a1 	bne.w	8002c88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 809b 	beq.w	8002c88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8095 	beq.w	8002c88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04e      	beq.n	8002c20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b8c:	8a3b      	ldrh	r3, [r7, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8098 	beq.w	8002cc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b98:	8a3a      	ldrh	r2, [r7, #16]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	f080 8092 	bcs.w	8002cc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8a3a      	ldrh	r2, [r7, #16]
 8002ba4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d02b      	beq.n	8002c08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bbe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bde:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0210 	bic.w	r2, r2, #16
 8002bfc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fab5 	bl	8001172 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	4619      	mov	r1, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f86d 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c1e:	e051      	b.n	8002cc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d047      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002c38:	8a7b      	ldrh	r3, [r7, #18]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d044      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0210 	bic.w	r2, r2, #16
 8002c7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c7c:	8a7b      	ldrh	r3, [r7, #18]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f839 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c86:	e01f      	b.n	8002cc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x324>
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8f9 	bl	8002e94 <UART_Transmit_IT>
    return;
 8002ca2:	e012      	b.n	8002cca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <HAL_UART_IRQHandler+0x34a>
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f93a 	bl	8002f32 <UART_EndTransmit_IT>
    return;
 8002cbe:	e004      	b.n	8002cca <HAL_UART_IRQHandler+0x34a>
    return;
 8002cc0:	bf00      	nop
 8002cc2:	e002      	b.n	8002cca <HAL_UART_IRQHandler+0x34a>
      return;
 8002cc4:	bf00      	nop
 8002cc6:	e000      	b.n	8002cca <HAL_UART_IRQHandler+0x34a>
      return;
 8002cc8:	bf00      	nop
  }
}
 8002cca:	3728      	adds	r7, #40	; 0x28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	08002e6d 	.word	0x08002e6d

08002cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d1e:	e02c      	b.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d028      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8002d2e:	f7fd feeb 	bl	8000b08 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d21d      	bcs.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e00f      	b.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4013      	ands	r3, r2
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d0c3      	beq.n	8002d20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	4613      	mov	r3, r2
 8002dae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2222      	movs	r2, #34	; 0x22
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0220 	orr.w	r2, r2, #32
 8002e06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0210 	bic.w	r2, r2, #16
 8002e52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7ff ff2d 	bl	8002ce6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b21      	cmp	r3, #33	; 0x21
 8002ea6:	d13e      	bne.n	8002f26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb0:	d114      	bne.n	8002edc <UART_Transmit_IT+0x48>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d110      	bne.n	8002edc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ece:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	621a      	str	r2, [r3, #32]
 8002eda:	e008      	b.n	8002eee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	1c59      	adds	r1, r3, #1
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6211      	str	r1, [r2, #32]
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4619      	mov	r1, r3
 8002efc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff febe 	bl	8002cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b22      	cmp	r3, #34	; 0x22
 8002f74:	f040 8099 	bne.w	80030aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f80:	d117      	bne.n	8002fb2 <UART_Receive_IT+0x50>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d113      	bne.n	8002fb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	1c9a      	adds	r2, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
 8002fb0:	e026      	b.n	8003000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d007      	beq.n	8002fd6 <UART_Receive_IT+0x74>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <UART_Receive_IT+0x82>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e008      	b.n	8002ff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29b      	uxth	r3, r3
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4619      	mov	r1, r3
 800300e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003010:	2b00      	cmp	r3, #0
 8003012:	d148      	bne.n	80030a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0220 	bic.w	r2, r2, #32
 8003022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	2b01      	cmp	r3, #1
 8003052:	d123      	bne.n	800309c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0210 	bic.w	r2, r2, #16
 8003068:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b10      	cmp	r3, #16
 8003076:	d10a      	bne.n	800308e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fe2f 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
 800309a:	e002      	b.n	80030a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd f973 	bl	8000388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e002      	b.n	80030ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030ee:	f023 030c 	bic.w	r3, r3, #12
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <UART_SetConfig+0x114>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800311c:	f7fe fe54 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	e002      	b.n	800312a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003124:	f7fe fe3c 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003128:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <UART_SetConfig+0x118>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	0119      	lsls	r1, r3, #4
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	009a      	lsls	r2, r3, #2
 8003154:	441a      	add	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <UART_SetConfig+0x118>)
 8003162:	fba3 0302 	umull	r0, r3, r3, r2
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2064      	movs	r0, #100	; 0x64
 800316a:	fb00 f303 	mul.w	r3, r0, r3
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	3332      	adds	r3, #50	; 0x32
 8003174:	4a15      	ldr	r2, [pc, #84]	; (80031cc <UART_SetConfig+0x118>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003180:	4419      	add	r1, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009a      	lsls	r2, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fbb2 f2f3 	udiv	r2, r2, r3
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <UART_SetConfig+0x118>)
 800319a:	fba3 0302 	umull	r0, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2064      	movs	r0, #100	; 0x64
 80031a2:	fb00 f303 	mul.w	r3, r0, r3
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	3332      	adds	r3, #50	; 0x32
 80031ac:	4a07      	ldr	r2, [pc, #28]	; (80031cc <UART_SetConfig+0x118>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	440a      	add	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40013800 	.word	0x40013800
 80031cc:	51eb851f 	.word	0x51eb851f

080031d0 <__errno>:
 80031d0:	4b01      	ldr	r3, [pc, #4]	; (80031d8 <__errno+0x8>)
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000010 	.word	0x20000010

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	2600      	movs	r6, #0
 80031e0:	4d0c      	ldr	r5, [pc, #48]	; (8003214 <__libc_init_array+0x38>)
 80031e2:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e4:	1b64      	subs	r4, r4, r5
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	f000 fc5c 	bl	8003aa8 <_init>
 80031f0:	2600      	movs	r6, #0
 80031f2:	4d0a      	ldr	r5, [pc, #40]	; (800321c <__libc_init_array+0x40>)
 80031f4:	4c0a      	ldr	r4, [pc, #40]	; (8003220 <__libc_init_array+0x44>)
 80031f6:	1b64      	subs	r4, r4, r5
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	08003b64 	.word	0x08003b64
 8003218:	08003b64 	.word	0x08003b64
 800321c:	08003b64 	.word	0x08003b64
 8003220:	08003b68 	.word	0x08003b68

08003224 <memset>:
 8003224:	4603      	mov	r3, r0
 8003226:	4402      	add	r2, r0
 8003228:	4293      	cmp	r3, r2
 800322a:	d100      	bne.n	800322e <memset+0xa>
 800322c:	4770      	bx	lr
 800322e:	f803 1b01 	strb.w	r1, [r3], #1
 8003232:	e7f9      	b.n	8003228 <memset+0x4>

08003234 <siprintf>:
 8003234:	b40e      	push	{r1, r2, r3}
 8003236:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800323a:	b500      	push	{lr}
 800323c:	b09c      	sub	sp, #112	; 0x70
 800323e:	ab1d      	add	r3, sp, #116	; 0x74
 8003240:	9002      	str	r0, [sp, #8]
 8003242:	9006      	str	r0, [sp, #24]
 8003244:	9107      	str	r1, [sp, #28]
 8003246:	9104      	str	r1, [sp, #16]
 8003248:	4808      	ldr	r0, [pc, #32]	; (800326c <siprintf+0x38>)
 800324a:	4909      	ldr	r1, [pc, #36]	; (8003270 <siprintf+0x3c>)
 800324c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003250:	9105      	str	r1, [sp, #20]
 8003252:	6800      	ldr	r0, [r0, #0]
 8003254:	a902      	add	r1, sp, #8
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	f000 f868 	bl	800332c <_svfiprintf_r>
 800325c:	2200      	movs	r2, #0
 800325e:	9b02      	ldr	r3, [sp, #8]
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	b01c      	add	sp, #112	; 0x70
 8003264:	f85d eb04 	ldr.w	lr, [sp], #4
 8003268:	b003      	add	sp, #12
 800326a:	4770      	bx	lr
 800326c:	20000010 	.word	0x20000010
 8003270:	ffff0208 	.word	0xffff0208

08003274 <__ssputs_r>:
 8003274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003278:	688e      	ldr	r6, [r1, #8]
 800327a:	4682      	mov	sl, r0
 800327c:	429e      	cmp	r6, r3
 800327e:	460c      	mov	r4, r1
 8003280:	4690      	mov	r8, r2
 8003282:	461f      	mov	r7, r3
 8003284:	d838      	bhi.n	80032f8 <__ssputs_r+0x84>
 8003286:	898a      	ldrh	r2, [r1, #12]
 8003288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800328c:	d032      	beq.n	80032f4 <__ssputs_r+0x80>
 800328e:	6825      	ldr	r5, [r4, #0]
 8003290:	6909      	ldr	r1, [r1, #16]
 8003292:	3301      	adds	r3, #1
 8003294:	eba5 0901 	sub.w	r9, r5, r1
 8003298:	6965      	ldr	r5, [r4, #20]
 800329a:	444b      	add	r3, r9
 800329c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032a4:	106d      	asrs	r5, r5, #1
 80032a6:	429d      	cmp	r5, r3
 80032a8:	bf38      	it	cc
 80032aa:	461d      	movcc	r5, r3
 80032ac:	0553      	lsls	r3, r2, #21
 80032ae:	d531      	bpl.n	8003314 <__ssputs_r+0xa0>
 80032b0:	4629      	mov	r1, r5
 80032b2:	f000 fb53 	bl	800395c <_malloc_r>
 80032b6:	4606      	mov	r6, r0
 80032b8:	b950      	cbnz	r0, 80032d0 <__ssputs_r+0x5c>
 80032ba:	230c      	movs	r3, #12
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f8ca 3000 	str.w	r3, [sl]
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ca:	81a3      	strh	r3, [r4, #12]
 80032cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d0:	464a      	mov	r2, r9
 80032d2:	6921      	ldr	r1, [r4, #16]
 80032d4:	f000 face 	bl	8003874 <memcpy>
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	6126      	str	r6, [r4, #16]
 80032e6:	444e      	add	r6, r9
 80032e8:	6026      	str	r6, [r4, #0]
 80032ea:	463e      	mov	r6, r7
 80032ec:	6165      	str	r5, [r4, #20]
 80032ee:	eba5 0509 	sub.w	r5, r5, r9
 80032f2:	60a5      	str	r5, [r4, #8]
 80032f4:	42be      	cmp	r6, r7
 80032f6:	d900      	bls.n	80032fa <__ssputs_r+0x86>
 80032f8:	463e      	mov	r6, r7
 80032fa:	4632      	mov	r2, r6
 80032fc:	4641      	mov	r1, r8
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	f000 fac6 	bl	8003890 <memmove>
 8003304:	68a3      	ldr	r3, [r4, #8]
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	1b9b      	subs	r3, r3, r6
 800330a:	4432      	add	r2, r6
 800330c:	2000      	movs	r0, #0
 800330e:	60a3      	str	r3, [r4, #8]
 8003310:	6022      	str	r2, [r4, #0]
 8003312:	e7db      	b.n	80032cc <__ssputs_r+0x58>
 8003314:	462a      	mov	r2, r5
 8003316:	f000 fb7b 	bl	8003a10 <_realloc_r>
 800331a:	4606      	mov	r6, r0
 800331c:	2800      	cmp	r0, #0
 800331e:	d1e1      	bne.n	80032e4 <__ssputs_r+0x70>
 8003320:	4650      	mov	r0, sl
 8003322:	6921      	ldr	r1, [r4, #16]
 8003324:	f000 face 	bl	80038c4 <_free_r>
 8003328:	e7c7      	b.n	80032ba <__ssputs_r+0x46>
	...

0800332c <_svfiprintf_r>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	4698      	mov	r8, r3
 8003332:	898b      	ldrh	r3, [r1, #12]
 8003334:	4607      	mov	r7, r0
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	460d      	mov	r5, r1
 800333a:	4614      	mov	r4, r2
 800333c:	b09d      	sub	sp, #116	; 0x74
 800333e:	d50e      	bpl.n	800335e <_svfiprintf_r+0x32>
 8003340:	690b      	ldr	r3, [r1, #16]
 8003342:	b963      	cbnz	r3, 800335e <_svfiprintf_r+0x32>
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	f000 fb09 	bl	800395c <_malloc_r>
 800334a:	6028      	str	r0, [r5, #0]
 800334c:	6128      	str	r0, [r5, #16]
 800334e:	b920      	cbnz	r0, 800335a <_svfiprintf_r+0x2e>
 8003350:	230c      	movs	r3, #12
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	e0d1      	b.n	80034fe <_svfiprintf_r+0x1d2>
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	616b      	str	r3, [r5, #20]
 800335e:	2300      	movs	r3, #0
 8003360:	9309      	str	r3, [sp, #36]	; 0x24
 8003362:	2320      	movs	r3, #32
 8003364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003368:	2330      	movs	r3, #48	; 0x30
 800336a:	f04f 0901 	mov.w	r9, #1
 800336e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003372:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003518 <_svfiprintf_r+0x1ec>
 8003376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800337a:	4623      	mov	r3, r4
 800337c:	469a      	mov	sl, r3
 800337e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003382:	b10a      	cbz	r2, 8003388 <_svfiprintf_r+0x5c>
 8003384:	2a25      	cmp	r2, #37	; 0x25
 8003386:	d1f9      	bne.n	800337c <_svfiprintf_r+0x50>
 8003388:	ebba 0b04 	subs.w	fp, sl, r4
 800338c:	d00b      	beq.n	80033a6 <_svfiprintf_r+0x7a>
 800338e:	465b      	mov	r3, fp
 8003390:	4622      	mov	r2, r4
 8003392:	4629      	mov	r1, r5
 8003394:	4638      	mov	r0, r7
 8003396:	f7ff ff6d 	bl	8003274 <__ssputs_r>
 800339a:	3001      	adds	r0, #1
 800339c:	f000 80aa 	beq.w	80034f4 <_svfiprintf_r+0x1c8>
 80033a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033a2:	445a      	add	r2, fp
 80033a4:	9209      	str	r2, [sp, #36]	; 0x24
 80033a6:	f89a 3000 	ldrb.w	r3, [sl]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80a2 	beq.w	80034f4 <_svfiprintf_r+0x1c8>
 80033b0:	2300      	movs	r3, #0
 80033b2:	f04f 32ff 	mov.w	r2, #4294967295
 80033b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ba:	f10a 0a01 	add.w	sl, sl, #1
 80033be:	9304      	str	r3, [sp, #16]
 80033c0:	9307      	str	r3, [sp, #28]
 80033c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033c6:	931a      	str	r3, [sp, #104]	; 0x68
 80033c8:	4654      	mov	r4, sl
 80033ca:	2205      	movs	r2, #5
 80033cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d0:	4851      	ldr	r0, [pc, #324]	; (8003518 <_svfiprintf_r+0x1ec>)
 80033d2:	f000 fa41 	bl	8003858 <memchr>
 80033d6:	9a04      	ldr	r2, [sp, #16]
 80033d8:	b9d8      	cbnz	r0, 8003412 <_svfiprintf_r+0xe6>
 80033da:	06d0      	lsls	r0, r2, #27
 80033dc:	bf44      	itt	mi
 80033de:	2320      	movmi	r3, #32
 80033e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033e4:	0711      	lsls	r1, r2, #28
 80033e6:	bf44      	itt	mi
 80033e8:	232b      	movmi	r3, #43	; 0x2b
 80033ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ee:	f89a 3000 	ldrb.w	r3, [sl]
 80033f2:	2b2a      	cmp	r3, #42	; 0x2a
 80033f4:	d015      	beq.n	8003422 <_svfiprintf_r+0xf6>
 80033f6:	4654      	mov	r4, sl
 80033f8:	2000      	movs	r0, #0
 80033fa:	f04f 0c0a 	mov.w	ip, #10
 80033fe:	9a07      	ldr	r2, [sp, #28]
 8003400:	4621      	mov	r1, r4
 8003402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003406:	3b30      	subs	r3, #48	; 0x30
 8003408:	2b09      	cmp	r3, #9
 800340a:	d94e      	bls.n	80034aa <_svfiprintf_r+0x17e>
 800340c:	b1b0      	cbz	r0, 800343c <_svfiprintf_r+0x110>
 800340e:	9207      	str	r2, [sp, #28]
 8003410:	e014      	b.n	800343c <_svfiprintf_r+0x110>
 8003412:	eba0 0308 	sub.w	r3, r0, r8
 8003416:	fa09 f303 	lsl.w	r3, r9, r3
 800341a:	4313      	orrs	r3, r2
 800341c:	46a2      	mov	sl, r4
 800341e:	9304      	str	r3, [sp, #16]
 8003420:	e7d2      	b.n	80033c8 <_svfiprintf_r+0x9c>
 8003422:	9b03      	ldr	r3, [sp, #12]
 8003424:	1d19      	adds	r1, r3, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	9103      	str	r1, [sp, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	bfbb      	ittet	lt
 800342e:	425b      	neglt	r3, r3
 8003430:	f042 0202 	orrlt.w	r2, r2, #2
 8003434:	9307      	strge	r3, [sp, #28]
 8003436:	9307      	strlt	r3, [sp, #28]
 8003438:	bfb8      	it	lt
 800343a:	9204      	strlt	r2, [sp, #16]
 800343c:	7823      	ldrb	r3, [r4, #0]
 800343e:	2b2e      	cmp	r3, #46	; 0x2e
 8003440:	d10c      	bne.n	800345c <_svfiprintf_r+0x130>
 8003442:	7863      	ldrb	r3, [r4, #1]
 8003444:	2b2a      	cmp	r3, #42	; 0x2a
 8003446:	d135      	bne.n	80034b4 <_svfiprintf_r+0x188>
 8003448:	9b03      	ldr	r3, [sp, #12]
 800344a:	3402      	adds	r4, #2
 800344c:	1d1a      	adds	r2, r3, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	9203      	str	r2, [sp, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	bfb8      	it	lt
 8003456:	f04f 33ff 	movlt.w	r3, #4294967295
 800345a:	9305      	str	r3, [sp, #20]
 800345c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003528 <_svfiprintf_r+0x1fc>
 8003460:	2203      	movs	r2, #3
 8003462:	4650      	mov	r0, sl
 8003464:	7821      	ldrb	r1, [r4, #0]
 8003466:	f000 f9f7 	bl	8003858 <memchr>
 800346a:	b140      	cbz	r0, 800347e <_svfiprintf_r+0x152>
 800346c:	2340      	movs	r3, #64	; 0x40
 800346e:	eba0 000a 	sub.w	r0, r0, sl
 8003472:	fa03 f000 	lsl.w	r0, r3, r0
 8003476:	9b04      	ldr	r3, [sp, #16]
 8003478:	3401      	adds	r4, #1
 800347a:	4303      	orrs	r3, r0
 800347c:	9304      	str	r3, [sp, #16]
 800347e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003482:	2206      	movs	r2, #6
 8003484:	4825      	ldr	r0, [pc, #148]	; (800351c <_svfiprintf_r+0x1f0>)
 8003486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800348a:	f000 f9e5 	bl	8003858 <memchr>
 800348e:	2800      	cmp	r0, #0
 8003490:	d038      	beq.n	8003504 <_svfiprintf_r+0x1d8>
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <_svfiprintf_r+0x1f4>)
 8003494:	bb1b      	cbnz	r3, 80034de <_svfiprintf_r+0x1b2>
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	3307      	adds	r3, #7
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	3308      	adds	r3, #8
 80034a0:	9303      	str	r3, [sp, #12]
 80034a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a4:	4433      	add	r3, r6
 80034a6:	9309      	str	r3, [sp, #36]	; 0x24
 80034a8:	e767      	b.n	800337a <_svfiprintf_r+0x4e>
 80034aa:	460c      	mov	r4, r1
 80034ac:	2001      	movs	r0, #1
 80034ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80034b2:	e7a5      	b.n	8003400 <_svfiprintf_r+0xd4>
 80034b4:	2300      	movs	r3, #0
 80034b6:	f04f 0c0a 	mov.w	ip, #10
 80034ba:	4619      	mov	r1, r3
 80034bc:	3401      	adds	r4, #1
 80034be:	9305      	str	r3, [sp, #20]
 80034c0:	4620      	mov	r0, r4
 80034c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c6:	3a30      	subs	r2, #48	; 0x30
 80034c8:	2a09      	cmp	r2, #9
 80034ca:	d903      	bls.n	80034d4 <_svfiprintf_r+0x1a8>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0c5      	beq.n	800345c <_svfiprintf_r+0x130>
 80034d0:	9105      	str	r1, [sp, #20]
 80034d2:	e7c3      	b.n	800345c <_svfiprintf_r+0x130>
 80034d4:	4604      	mov	r4, r0
 80034d6:	2301      	movs	r3, #1
 80034d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80034dc:	e7f0      	b.n	80034c0 <_svfiprintf_r+0x194>
 80034de:	ab03      	add	r3, sp, #12
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	462a      	mov	r2, r5
 80034e4:	4638      	mov	r0, r7
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <_svfiprintf_r+0x1f8>)
 80034e8:	a904      	add	r1, sp, #16
 80034ea:	f3af 8000 	nop.w
 80034ee:	1c42      	adds	r2, r0, #1
 80034f0:	4606      	mov	r6, r0
 80034f2:	d1d6      	bne.n	80034a2 <_svfiprintf_r+0x176>
 80034f4:	89ab      	ldrh	r3, [r5, #12]
 80034f6:	065b      	lsls	r3, r3, #25
 80034f8:	f53f af2c 	bmi.w	8003354 <_svfiprintf_r+0x28>
 80034fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034fe:	b01d      	add	sp, #116	; 0x74
 8003500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003504:	ab03      	add	r3, sp, #12
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	462a      	mov	r2, r5
 800350a:	4638      	mov	r0, r7
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <_svfiprintf_r+0x1f8>)
 800350e:	a904      	add	r1, sp, #16
 8003510:	f000 f87c 	bl	800360c <_printf_i>
 8003514:	e7eb      	b.n	80034ee <_svfiprintf_r+0x1c2>
 8003516:	bf00      	nop
 8003518:	08003b30 	.word	0x08003b30
 800351c:	08003b3a 	.word	0x08003b3a
 8003520:	00000000 	.word	0x00000000
 8003524:	08003275 	.word	0x08003275
 8003528:	08003b36 	.word	0x08003b36

0800352c <_printf_common>:
 800352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	4616      	mov	r6, r2
 8003532:	4699      	mov	r9, r3
 8003534:	688a      	ldr	r2, [r1, #8]
 8003536:	690b      	ldr	r3, [r1, #16]
 8003538:	4607      	mov	r7, r0
 800353a:	4293      	cmp	r3, r2
 800353c:	bfb8      	it	lt
 800353e:	4613      	movlt	r3, r2
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003546:	460c      	mov	r4, r1
 8003548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800354c:	b10a      	cbz	r2, 8003552 <_printf_common+0x26>
 800354e:	3301      	adds	r3, #1
 8003550:	6033      	str	r3, [r6, #0]
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	0699      	lsls	r1, r3, #26
 8003556:	bf42      	ittt	mi
 8003558:	6833      	ldrmi	r3, [r6, #0]
 800355a:	3302      	addmi	r3, #2
 800355c:	6033      	strmi	r3, [r6, #0]
 800355e:	6825      	ldr	r5, [r4, #0]
 8003560:	f015 0506 	ands.w	r5, r5, #6
 8003564:	d106      	bne.n	8003574 <_printf_common+0x48>
 8003566:	f104 0a19 	add.w	sl, r4, #25
 800356a:	68e3      	ldr	r3, [r4, #12]
 800356c:	6832      	ldr	r2, [r6, #0]
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	42ab      	cmp	r3, r5
 8003572:	dc28      	bgt.n	80035c6 <_printf_common+0x9a>
 8003574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003578:	1e13      	subs	r3, r2, #0
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	bf18      	it	ne
 800357e:	2301      	movne	r3, #1
 8003580:	0692      	lsls	r2, r2, #26
 8003582:	d42d      	bmi.n	80035e0 <_printf_common+0xb4>
 8003584:	4649      	mov	r1, r9
 8003586:	4638      	mov	r0, r7
 8003588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800358c:	47c0      	blx	r8
 800358e:	3001      	adds	r0, #1
 8003590:	d020      	beq.n	80035d4 <_printf_common+0xa8>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	68e5      	ldr	r5, [r4, #12]
 8003596:	f003 0306 	and.w	r3, r3, #6
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf18      	it	ne
 800359e:	2500      	movne	r5, #0
 80035a0:	6832      	ldr	r2, [r6, #0]
 80035a2:	f04f 0600 	mov.w	r6, #0
 80035a6:	68a3      	ldr	r3, [r4, #8]
 80035a8:	bf08      	it	eq
 80035aa:	1aad      	subeq	r5, r5, r2
 80035ac:	6922      	ldr	r2, [r4, #16]
 80035ae:	bf08      	it	eq
 80035b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bfc4      	itt	gt
 80035b8:	1a9b      	subgt	r3, r3, r2
 80035ba:	18ed      	addgt	r5, r5, r3
 80035bc:	341a      	adds	r4, #26
 80035be:	42b5      	cmp	r5, r6
 80035c0:	d11a      	bne.n	80035f8 <_printf_common+0xcc>
 80035c2:	2000      	movs	r0, #0
 80035c4:	e008      	b.n	80035d8 <_printf_common+0xac>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4652      	mov	r2, sl
 80035ca:	4649      	mov	r1, r9
 80035cc:	4638      	mov	r0, r7
 80035ce:	47c0      	blx	r8
 80035d0:	3001      	adds	r0, #1
 80035d2:	d103      	bne.n	80035dc <_printf_common+0xb0>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035dc:	3501      	adds	r5, #1
 80035de:	e7c4      	b.n	800356a <_printf_common+0x3e>
 80035e0:	2030      	movs	r0, #48	; 0x30
 80035e2:	18e1      	adds	r1, r4, r3
 80035e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035ee:	4422      	add	r2, r4
 80035f0:	3302      	adds	r3, #2
 80035f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035f6:	e7c5      	b.n	8003584 <_printf_common+0x58>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4622      	mov	r2, r4
 80035fc:	4649      	mov	r1, r9
 80035fe:	4638      	mov	r0, r7
 8003600:	47c0      	blx	r8
 8003602:	3001      	adds	r0, #1
 8003604:	d0e6      	beq.n	80035d4 <_printf_common+0xa8>
 8003606:	3601      	adds	r6, #1
 8003608:	e7d9      	b.n	80035be <_printf_common+0x92>
	...

0800360c <_printf_i>:
 800360c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	460c      	mov	r4, r1
 8003612:	7e27      	ldrb	r7, [r4, #24]
 8003614:	4691      	mov	r9, r2
 8003616:	2f78      	cmp	r7, #120	; 0x78
 8003618:	4680      	mov	r8, r0
 800361a:	469a      	mov	sl, r3
 800361c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800361e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003622:	d807      	bhi.n	8003634 <_printf_i+0x28>
 8003624:	2f62      	cmp	r7, #98	; 0x62
 8003626:	d80a      	bhi.n	800363e <_printf_i+0x32>
 8003628:	2f00      	cmp	r7, #0
 800362a:	f000 80d9 	beq.w	80037e0 <_printf_i+0x1d4>
 800362e:	2f58      	cmp	r7, #88	; 0x58
 8003630:	f000 80a4 	beq.w	800377c <_printf_i+0x170>
 8003634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800363c:	e03a      	b.n	80036b4 <_printf_i+0xa8>
 800363e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003642:	2b15      	cmp	r3, #21
 8003644:	d8f6      	bhi.n	8003634 <_printf_i+0x28>
 8003646:	a001      	add	r0, pc, #4	; (adr r0, 800364c <_printf_i+0x40>)
 8003648:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800364c:	080036a5 	.word	0x080036a5
 8003650:	080036b9 	.word	0x080036b9
 8003654:	08003635 	.word	0x08003635
 8003658:	08003635 	.word	0x08003635
 800365c:	08003635 	.word	0x08003635
 8003660:	08003635 	.word	0x08003635
 8003664:	080036b9 	.word	0x080036b9
 8003668:	08003635 	.word	0x08003635
 800366c:	08003635 	.word	0x08003635
 8003670:	08003635 	.word	0x08003635
 8003674:	08003635 	.word	0x08003635
 8003678:	080037c7 	.word	0x080037c7
 800367c:	080036e9 	.word	0x080036e9
 8003680:	080037a9 	.word	0x080037a9
 8003684:	08003635 	.word	0x08003635
 8003688:	08003635 	.word	0x08003635
 800368c:	080037e9 	.word	0x080037e9
 8003690:	08003635 	.word	0x08003635
 8003694:	080036e9 	.word	0x080036e9
 8003698:	08003635 	.word	0x08003635
 800369c:	08003635 	.word	0x08003635
 80036a0:	080037b1 	.word	0x080037b1
 80036a4:	680b      	ldr	r3, [r1, #0]
 80036a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	600a      	str	r2, [r1, #0]
 80036b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0a4      	b.n	8003802 <_printf_i+0x1f6>
 80036b8:	6825      	ldr	r5, [r4, #0]
 80036ba:	6808      	ldr	r0, [r1, #0]
 80036bc:	062e      	lsls	r6, r5, #24
 80036be:	f100 0304 	add.w	r3, r0, #4
 80036c2:	d50a      	bpl.n	80036da <_printf_i+0xce>
 80036c4:	6805      	ldr	r5, [r0, #0]
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	da03      	bge.n	80036d4 <_printf_i+0xc8>
 80036cc:	232d      	movs	r3, #45	; 0x2d
 80036ce:	426d      	negs	r5, r5
 80036d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d4:	230a      	movs	r3, #10
 80036d6:	485e      	ldr	r0, [pc, #376]	; (8003850 <_printf_i+0x244>)
 80036d8:	e019      	b.n	800370e <_printf_i+0x102>
 80036da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036de:	6805      	ldr	r5, [r0, #0]
 80036e0:	600b      	str	r3, [r1, #0]
 80036e2:	bf18      	it	ne
 80036e4:	b22d      	sxthne	r5, r5
 80036e6:	e7ef      	b.n	80036c8 <_printf_i+0xbc>
 80036e8:	680b      	ldr	r3, [r1, #0]
 80036ea:	6825      	ldr	r5, [r4, #0]
 80036ec:	1d18      	adds	r0, r3, #4
 80036ee:	6008      	str	r0, [r1, #0]
 80036f0:	0628      	lsls	r0, r5, #24
 80036f2:	d501      	bpl.n	80036f8 <_printf_i+0xec>
 80036f4:	681d      	ldr	r5, [r3, #0]
 80036f6:	e002      	b.n	80036fe <_printf_i+0xf2>
 80036f8:	0669      	lsls	r1, r5, #25
 80036fa:	d5fb      	bpl.n	80036f4 <_printf_i+0xe8>
 80036fc:	881d      	ldrh	r5, [r3, #0]
 80036fe:	2f6f      	cmp	r7, #111	; 0x6f
 8003700:	bf0c      	ite	eq
 8003702:	2308      	moveq	r3, #8
 8003704:	230a      	movne	r3, #10
 8003706:	4852      	ldr	r0, [pc, #328]	; (8003850 <_printf_i+0x244>)
 8003708:	2100      	movs	r1, #0
 800370a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800370e:	6866      	ldr	r6, [r4, #4]
 8003710:	2e00      	cmp	r6, #0
 8003712:	bfa8      	it	ge
 8003714:	6821      	ldrge	r1, [r4, #0]
 8003716:	60a6      	str	r6, [r4, #8]
 8003718:	bfa4      	itt	ge
 800371a:	f021 0104 	bicge.w	r1, r1, #4
 800371e:	6021      	strge	r1, [r4, #0]
 8003720:	b90d      	cbnz	r5, 8003726 <_printf_i+0x11a>
 8003722:	2e00      	cmp	r6, #0
 8003724:	d04d      	beq.n	80037c2 <_printf_i+0x1b6>
 8003726:	4616      	mov	r6, r2
 8003728:	fbb5 f1f3 	udiv	r1, r5, r3
 800372c:	fb03 5711 	mls	r7, r3, r1, r5
 8003730:	5dc7      	ldrb	r7, [r0, r7]
 8003732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003736:	462f      	mov	r7, r5
 8003738:	42bb      	cmp	r3, r7
 800373a:	460d      	mov	r5, r1
 800373c:	d9f4      	bls.n	8003728 <_printf_i+0x11c>
 800373e:	2b08      	cmp	r3, #8
 8003740:	d10b      	bne.n	800375a <_printf_i+0x14e>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	07df      	lsls	r7, r3, #31
 8003746:	d508      	bpl.n	800375a <_printf_i+0x14e>
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	6861      	ldr	r1, [r4, #4]
 800374c:	4299      	cmp	r1, r3
 800374e:	bfde      	ittt	le
 8003750:	2330      	movle	r3, #48	; 0x30
 8003752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003756:	f106 36ff 	addle.w	r6, r6, #4294967295
 800375a:	1b92      	subs	r2, r2, r6
 800375c:	6122      	str	r2, [r4, #16]
 800375e:	464b      	mov	r3, r9
 8003760:	4621      	mov	r1, r4
 8003762:	4640      	mov	r0, r8
 8003764:	f8cd a000 	str.w	sl, [sp]
 8003768:	aa03      	add	r2, sp, #12
 800376a:	f7ff fedf 	bl	800352c <_printf_common>
 800376e:	3001      	adds	r0, #1
 8003770:	d14c      	bne.n	800380c <_printf_i+0x200>
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	b004      	add	sp, #16
 8003778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377c:	4834      	ldr	r0, [pc, #208]	; (8003850 <_printf_i+0x244>)
 800377e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003782:	680e      	ldr	r6, [r1, #0]
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f856 5b04 	ldr.w	r5, [r6], #4
 800378a:	061f      	lsls	r7, r3, #24
 800378c:	600e      	str	r6, [r1, #0]
 800378e:	d514      	bpl.n	80037ba <_printf_i+0x1ae>
 8003790:	07d9      	lsls	r1, r3, #31
 8003792:	bf44      	itt	mi
 8003794:	f043 0320 	orrmi.w	r3, r3, #32
 8003798:	6023      	strmi	r3, [r4, #0]
 800379a:	b91d      	cbnz	r5, 80037a4 <_printf_i+0x198>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	f023 0320 	bic.w	r3, r3, #32
 80037a2:	6023      	str	r3, [r4, #0]
 80037a4:	2310      	movs	r3, #16
 80037a6:	e7af      	b.n	8003708 <_printf_i+0xfc>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f043 0320 	orr.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	2378      	movs	r3, #120	; 0x78
 80037b2:	4828      	ldr	r0, [pc, #160]	; (8003854 <_printf_i+0x248>)
 80037b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037b8:	e7e3      	b.n	8003782 <_printf_i+0x176>
 80037ba:	065e      	lsls	r6, r3, #25
 80037bc:	bf48      	it	mi
 80037be:	b2ad      	uxthmi	r5, r5
 80037c0:	e7e6      	b.n	8003790 <_printf_i+0x184>
 80037c2:	4616      	mov	r6, r2
 80037c4:	e7bb      	b.n	800373e <_printf_i+0x132>
 80037c6:	680b      	ldr	r3, [r1, #0]
 80037c8:	6826      	ldr	r6, [r4, #0]
 80037ca:	1d1d      	adds	r5, r3, #4
 80037cc:	6960      	ldr	r0, [r4, #20]
 80037ce:	600d      	str	r5, [r1, #0]
 80037d0:	0635      	lsls	r5, r6, #24
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	d501      	bpl.n	80037da <_printf_i+0x1ce>
 80037d6:	6018      	str	r0, [r3, #0]
 80037d8:	e002      	b.n	80037e0 <_printf_i+0x1d4>
 80037da:	0671      	lsls	r1, r6, #25
 80037dc:	d5fb      	bpl.n	80037d6 <_printf_i+0x1ca>
 80037de:	8018      	strh	r0, [r3, #0]
 80037e0:	2300      	movs	r3, #0
 80037e2:	4616      	mov	r6, r2
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	e7ba      	b.n	800375e <_printf_i+0x152>
 80037e8:	680b      	ldr	r3, [r1, #0]
 80037ea:	1d1a      	adds	r2, r3, #4
 80037ec:	600a      	str	r2, [r1, #0]
 80037ee:	681e      	ldr	r6, [r3, #0]
 80037f0:	2100      	movs	r1, #0
 80037f2:	4630      	mov	r0, r6
 80037f4:	6862      	ldr	r2, [r4, #4]
 80037f6:	f000 f82f 	bl	8003858 <memchr>
 80037fa:	b108      	cbz	r0, 8003800 <_printf_i+0x1f4>
 80037fc:	1b80      	subs	r0, r0, r6
 80037fe:	6060      	str	r0, [r4, #4]
 8003800:	6863      	ldr	r3, [r4, #4]
 8003802:	6123      	str	r3, [r4, #16]
 8003804:	2300      	movs	r3, #0
 8003806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380a:	e7a8      	b.n	800375e <_printf_i+0x152>
 800380c:	4632      	mov	r2, r6
 800380e:	4649      	mov	r1, r9
 8003810:	4640      	mov	r0, r8
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	47d0      	blx	sl
 8003816:	3001      	adds	r0, #1
 8003818:	d0ab      	beq.n	8003772 <_printf_i+0x166>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	079b      	lsls	r3, r3, #30
 800381e:	d413      	bmi.n	8003848 <_printf_i+0x23c>
 8003820:	68e0      	ldr	r0, [r4, #12]
 8003822:	9b03      	ldr	r3, [sp, #12]
 8003824:	4298      	cmp	r0, r3
 8003826:	bfb8      	it	lt
 8003828:	4618      	movlt	r0, r3
 800382a:	e7a4      	b.n	8003776 <_printf_i+0x16a>
 800382c:	2301      	movs	r3, #1
 800382e:	4632      	mov	r2, r6
 8003830:	4649      	mov	r1, r9
 8003832:	4640      	mov	r0, r8
 8003834:	47d0      	blx	sl
 8003836:	3001      	adds	r0, #1
 8003838:	d09b      	beq.n	8003772 <_printf_i+0x166>
 800383a:	3501      	adds	r5, #1
 800383c:	68e3      	ldr	r3, [r4, #12]
 800383e:	9903      	ldr	r1, [sp, #12]
 8003840:	1a5b      	subs	r3, r3, r1
 8003842:	42ab      	cmp	r3, r5
 8003844:	dcf2      	bgt.n	800382c <_printf_i+0x220>
 8003846:	e7eb      	b.n	8003820 <_printf_i+0x214>
 8003848:	2500      	movs	r5, #0
 800384a:	f104 0619 	add.w	r6, r4, #25
 800384e:	e7f5      	b.n	800383c <_printf_i+0x230>
 8003850:	08003b41 	.word	0x08003b41
 8003854:	08003b52 	.word	0x08003b52

08003858 <memchr>:
 8003858:	4603      	mov	r3, r0
 800385a:	b510      	push	{r4, lr}
 800385c:	b2c9      	uxtb	r1, r1
 800385e:	4402      	add	r2, r0
 8003860:	4293      	cmp	r3, r2
 8003862:	4618      	mov	r0, r3
 8003864:	d101      	bne.n	800386a <memchr+0x12>
 8003866:	2000      	movs	r0, #0
 8003868:	e003      	b.n	8003872 <memchr+0x1a>
 800386a:	7804      	ldrb	r4, [r0, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	428c      	cmp	r4, r1
 8003870:	d1f6      	bne.n	8003860 <memchr+0x8>
 8003872:	bd10      	pop	{r4, pc}

08003874 <memcpy>:
 8003874:	440a      	add	r2, r1
 8003876:	4291      	cmp	r1, r2
 8003878:	f100 33ff 	add.w	r3, r0, #4294967295
 800387c:	d100      	bne.n	8003880 <memcpy+0xc>
 800387e:	4770      	bx	lr
 8003880:	b510      	push	{r4, lr}
 8003882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003886:	4291      	cmp	r1, r2
 8003888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800388c:	d1f9      	bne.n	8003882 <memcpy+0xe>
 800388e:	bd10      	pop	{r4, pc}

08003890 <memmove>:
 8003890:	4288      	cmp	r0, r1
 8003892:	b510      	push	{r4, lr}
 8003894:	eb01 0402 	add.w	r4, r1, r2
 8003898:	d902      	bls.n	80038a0 <memmove+0x10>
 800389a:	4284      	cmp	r4, r0
 800389c:	4623      	mov	r3, r4
 800389e:	d807      	bhi.n	80038b0 <memmove+0x20>
 80038a0:	1e43      	subs	r3, r0, #1
 80038a2:	42a1      	cmp	r1, r4
 80038a4:	d008      	beq.n	80038b8 <memmove+0x28>
 80038a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ae:	e7f8      	b.n	80038a2 <memmove+0x12>
 80038b0:	4601      	mov	r1, r0
 80038b2:	4402      	add	r2, r0
 80038b4:	428a      	cmp	r2, r1
 80038b6:	d100      	bne.n	80038ba <memmove+0x2a>
 80038b8:	bd10      	pop	{r4, pc}
 80038ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038c2:	e7f7      	b.n	80038b4 <memmove+0x24>

080038c4 <_free_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4605      	mov	r5, r0
 80038c8:	2900      	cmp	r1, #0
 80038ca:	d043      	beq.n	8003954 <_free_r+0x90>
 80038cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d0:	1f0c      	subs	r4, r1, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bfb8      	it	lt
 80038d6:	18e4      	addlt	r4, r4, r3
 80038d8:	f000 f8d0 	bl	8003a7c <__malloc_lock>
 80038dc:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <_free_r+0x94>)
 80038de:	6813      	ldr	r3, [r2, #0]
 80038e0:	4610      	mov	r0, r2
 80038e2:	b933      	cbnz	r3, 80038f2 <_free_r+0x2e>
 80038e4:	6063      	str	r3, [r4, #4]
 80038e6:	6014      	str	r4, [r2, #0]
 80038e8:	4628      	mov	r0, r5
 80038ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ee:	f000 b8cb 	b.w	8003a88 <__malloc_unlock>
 80038f2:	42a3      	cmp	r3, r4
 80038f4:	d90a      	bls.n	800390c <_free_r+0x48>
 80038f6:	6821      	ldr	r1, [r4, #0]
 80038f8:	1862      	adds	r2, r4, r1
 80038fa:	4293      	cmp	r3, r2
 80038fc:	bf01      	itttt	eq
 80038fe:	681a      	ldreq	r2, [r3, #0]
 8003900:	685b      	ldreq	r3, [r3, #4]
 8003902:	1852      	addeq	r2, r2, r1
 8003904:	6022      	streq	r2, [r4, #0]
 8003906:	6063      	str	r3, [r4, #4]
 8003908:	6004      	str	r4, [r0, #0]
 800390a:	e7ed      	b.n	80038e8 <_free_r+0x24>
 800390c:	461a      	mov	r2, r3
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	b10b      	cbz	r3, 8003916 <_free_r+0x52>
 8003912:	42a3      	cmp	r3, r4
 8003914:	d9fa      	bls.n	800390c <_free_r+0x48>
 8003916:	6811      	ldr	r1, [r2, #0]
 8003918:	1850      	adds	r0, r2, r1
 800391a:	42a0      	cmp	r0, r4
 800391c:	d10b      	bne.n	8003936 <_free_r+0x72>
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	4401      	add	r1, r0
 8003922:	1850      	adds	r0, r2, r1
 8003924:	4283      	cmp	r3, r0
 8003926:	6011      	str	r1, [r2, #0]
 8003928:	d1de      	bne.n	80038e8 <_free_r+0x24>
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4401      	add	r1, r0
 8003930:	6011      	str	r1, [r2, #0]
 8003932:	6053      	str	r3, [r2, #4]
 8003934:	e7d8      	b.n	80038e8 <_free_r+0x24>
 8003936:	d902      	bls.n	800393e <_free_r+0x7a>
 8003938:	230c      	movs	r3, #12
 800393a:	602b      	str	r3, [r5, #0]
 800393c:	e7d4      	b.n	80038e8 <_free_r+0x24>
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	1821      	adds	r1, r4, r0
 8003942:	428b      	cmp	r3, r1
 8003944:	bf01      	itttt	eq
 8003946:	6819      	ldreq	r1, [r3, #0]
 8003948:	685b      	ldreq	r3, [r3, #4]
 800394a:	1809      	addeq	r1, r1, r0
 800394c:	6021      	streq	r1, [r4, #0]
 800394e:	6063      	str	r3, [r4, #4]
 8003950:	6054      	str	r4, [r2, #4]
 8003952:	e7c9      	b.n	80038e8 <_free_r+0x24>
 8003954:	bd38      	pop	{r3, r4, r5, pc}
 8003956:	bf00      	nop
 8003958:	200000b0 	.word	0x200000b0

0800395c <_malloc_r>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	1ccd      	adds	r5, r1, #3
 8003960:	f025 0503 	bic.w	r5, r5, #3
 8003964:	3508      	adds	r5, #8
 8003966:	2d0c      	cmp	r5, #12
 8003968:	bf38      	it	cc
 800396a:	250c      	movcc	r5, #12
 800396c:	2d00      	cmp	r5, #0
 800396e:	4606      	mov	r6, r0
 8003970:	db01      	blt.n	8003976 <_malloc_r+0x1a>
 8003972:	42a9      	cmp	r1, r5
 8003974:	d903      	bls.n	800397e <_malloc_r+0x22>
 8003976:	230c      	movs	r3, #12
 8003978:	6033      	str	r3, [r6, #0]
 800397a:	2000      	movs	r0, #0
 800397c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800397e:	f000 f87d 	bl	8003a7c <__malloc_lock>
 8003982:	4921      	ldr	r1, [pc, #132]	; (8003a08 <_malloc_r+0xac>)
 8003984:	680a      	ldr	r2, [r1, #0]
 8003986:	4614      	mov	r4, r2
 8003988:	b99c      	cbnz	r4, 80039b2 <_malloc_r+0x56>
 800398a:	4f20      	ldr	r7, [pc, #128]	; (8003a0c <_malloc_r+0xb0>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	b923      	cbnz	r3, 800399a <_malloc_r+0x3e>
 8003990:	4621      	mov	r1, r4
 8003992:	4630      	mov	r0, r6
 8003994:	f000 f862 	bl	8003a5c <_sbrk_r>
 8003998:	6038      	str	r0, [r7, #0]
 800399a:	4629      	mov	r1, r5
 800399c:	4630      	mov	r0, r6
 800399e:	f000 f85d 	bl	8003a5c <_sbrk_r>
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	d123      	bne.n	80039ee <_malloc_r+0x92>
 80039a6:	230c      	movs	r3, #12
 80039a8:	4630      	mov	r0, r6
 80039aa:	6033      	str	r3, [r6, #0]
 80039ac:	f000 f86c 	bl	8003a88 <__malloc_unlock>
 80039b0:	e7e3      	b.n	800397a <_malloc_r+0x1e>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	1b5b      	subs	r3, r3, r5
 80039b6:	d417      	bmi.n	80039e8 <_malloc_r+0x8c>
 80039b8:	2b0b      	cmp	r3, #11
 80039ba:	d903      	bls.n	80039c4 <_malloc_r+0x68>
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	441c      	add	r4, r3
 80039c0:	6025      	str	r5, [r4, #0]
 80039c2:	e004      	b.n	80039ce <_malloc_r+0x72>
 80039c4:	6863      	ldr	r3, [r4, #4]
 80039c6:	42a2      	cmp	r2, r4
 80039c8:	bf0c      	ite	eq
 80039ca:	600b      	streq	r3, [r1, #0]
 80039cc:	6053      	strne	r3, [r2, #4]
 80039ce:	4630      	mov	r0, r6
 80039d0:	f000 f85a 	bl	8003a88 <__malloc_unlock>
 80039d4:	f104 000b 	add.w	r0, r4, #11
 80039d8:	1d23      	adds	r3, r4, #4
 80039da:	f020 0007 	bic.w	r0, r0, #7
 80039de:	1ac2      	subs	r2, r0, r3
 80039e0:	d0cc      	beq.n	800397c <_malloc_r+0x20>
 80039e2:	1a1b      	subs	r3, r3, r0
 80039e4:	50a3      	str	r3, [r4, r2]
 80039e6:	e7c9      	b.n	800397c <_malloc_r+0x20>
 80039e8:	4622      	mov	r2, r4
 80039ea:	6864      	ldr	r4, [r4, #4]
 80039ec:	e7cc      	b.n	8003988 <_malloc_r+0x2c>
 80039ee:	1cc4      	adds	r4, r0, #3
 80039f0:	f024 0403 	bic.w	r4, r4, #3
 80039f4:	42a0      	cmp	r0, r4
 80039f6:	d0e3      	beq.n	80039c0 <_malloc_r+0x64>
 80039f8:	1a21      	subs	r1, r4, r0
 80039fa:	4630      	mov	r0, r6
 80039fc:	f000 f82e 	bl	8003a5c <_sbrk_r>
 8003a00:	3001      	adds	r0, #1
 8003a02:	d1dd      	bne.n	80039c0 <_malloc_r+0x64>
 8003a04:	e7cf      	b.n	80039a6 <_malloc_r+0x4a>
 8003a06:	bf00      	nop
 8003a08:	200000b0 	.word	0x200000b0
 8003a0c:	200000b4 	.word	0x200000b4

08003a10 <_realloc_r>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	4607      	mov	r7, r0
 8003a14:	4614      	mov	r4, r2
 8003a16:	460e      	mov	r6, r1
 8003a18:	b921      	cbnz	r1, 8003a24 <_realloc_r+0x14>
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a20:	f7ff bf9c 	b.w	800395c <_malloc_r>
 8003a24:	b922      	cbnz	r2, 8003a30 <_realloc_r+0x20>
 8003a26:	f7ff ff4d 	bl	80038c4 <_free_r>
 8003a2a:	4625      	mov	r5, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a30:	f000 f830 	bl	8003a94 <_malloc_usable_size_r>
 8003a34:	42a0      	cmp	r0, r4
 8003a36:	d20f      	bcs.n	8003a58 <_realloc_r+0x48>
 8003a38:	4621      	mov	r1, r4
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	f7ff ff8e 	bl	800395c <_malloc_r>
 8003a40:	4605      	mov	r5, r0
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d0f2      	beq.n	8003a2c <_realloc_r+0x1c>
 8003a46:	4631      	mov	r1, r6
 8003a48:	4622      	mov	r2, r4
 8003a4a:	f7ff ff13 	bl	8003874 <memcpy>
 8003a4e:	4631      	mov	r1, r6
 8003a50:	4638      	mov	r0, r7
 8003a52:	f7ff ff37 	bl	80038c4 <_free_r>
 8003a56:	e7e9      	b.n	8003a2c <_realloc_r+0x1c>
 8003a58:	4635      	mov	r5, r6
 8003a5a:	e7e7      	b.n	8003a2c <_realloc_r+0x1c>

08003a5c <_sbrk_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4d05      	ldr	r5, [pc, #20]	; (8003a78 <_sbrk_r+0x1c>)
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	f7fc ff94 	bl	8000994 <_sbrk>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_sbrk_r+0x1a>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_sbrk_r+0x1a>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	200001b8 	.word	0x200001b8

08003a7c <__malloc_lock>:
 8003a7c:	4801      	ldr	r0, [pc, #4]	; (8003a84 <__malloc_lock+0x8>)
 8003a7e:	f000 b811 	b.w	8003aa4 <__retarget_lock_acquire_recursive>
 8003a82:	bf00      	nop
 8003a84:	200001c0 	.word	0x200001c0

08003a88 <__malloc_unlock>:
 8003a88:	4801      	ldr	r0, [pc, #4]	; (8003a90 <__malloc_unlock+0x8>)
 8003a8a:	f000 b80c 	b.w	8003aa6 <__retarget_lock_release_recursive>
 8003a8e:	bf00      	nop
 8003a90:	200001c0 	.word	0x200001c0

08003a94 <_malloc_usable_size_r>:
 8003a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a98:	1f18      	subs	r0, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bfbc      	itt	lt
 8003a9e:	580b      	ldrlt	r3, [r1, r0]
 8003aa0:	18c0      	addlt	r0, r0, r3
 8003aa2:	4770      	bx	lr

08003aa4 <__retarget_lock_acquire_recursive>:
 8003aa4:	4770      	bx	lr

08003aa6 <__retarget_lock_release_recursive>:
 8003aa6:	4770      	bx	lr

08003aa8 <_init>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	bf00      	nop
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr

08003ab4 <_fini>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	bf00      	nop
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr
